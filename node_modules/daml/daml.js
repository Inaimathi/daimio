/*
  Initial setup:
  - create the top-level space 
  - run code in the top level space which
    - builds subspaces with their own dialects
    - builds gateways to I/O
    - connects those gateways to channels
    - connects subspaces to channels

  The basic execution process:
  - create a new Block from a string S and a Space (which has a Dialect and a Varset)
    - breaks S into components (text, pipelines, blocks)
    - recursively converts any further blocks
    - builds Pipelines from a string, dialect and state
      - recursively builds inner pipelines and blocks
      - perform compile-time operations (escaping blocks, etc)
  - call block.execute() ... or space.execute? no, space.execute(block) always takes a param (possibly an empty one)
    
      
  
  Q: how do we keep from initially compiling subspace init blocks, since those should be compiled with their parent dialect? 
  A: don't worry about it for now -- recompile as often as needed.
  
  Q: how do we detect and activate compile-time operations? this happens in block init pipelines, including possibly our initial (top-level) block. it can also happen in regular pipelines. e.g. {begin foo | string quote}
  
  Q: how do we attach execution code to a space? A space has init code that builds it... maybe {space create} takes a block? yeah, suppose so. is that block compiled with the space's dialect? yep, that makes sense. {space create block $B dialect $D | > :MYSPACE} or something.



// NEW THOUGHTS
collects
checks
calculates
effects

gather
conditions
calculations
effects

Maybe add Frink as a handler?

*/ 

DAML = {}
DAML.ETC = {}
DAML.ABLOCKS = {}
DAML.SPACESEEDS = {}
DAML.DIALECTS = {}
DAML.TYPES = {}
DAML.ALIASES = {};

DAML.Parser = {}
DAML.models = {}

DAML.command_open = '{'
DAML.command_closed = '}'
DAML.list_open = '('
DAML.list_closed = ')'
DAML.quote = '"'

/*
  If we make the event log a little stronger, can we use it to update local stores? 
  example: Bowser is auditing in his browser. He pulls up an audit and gets to work. This loads up all the audit data, but it also subscribes to the update channels for those _things_. Then Peach loads the same audit and makes some changes. 
  - Bowser's browser receives those events and updates the cached audit data accordingly (and hence the display).
  - Any queries to loaded objects can just hit the local cache, because it's automatically kept in sync.
 implies the local commands understand how to modify local cache based on events... hmmm.
 
 Log commands as a 3-element list: [H, M, P], with H&M as strings and P as a param map. this is canonical. also log time and user id. 
 thing: this is findable if it matches H+P.id. some commands might affect multiple things (but most don't). so... always log thing? never log thing? if the command is atomic, then the command is the bottom, not the thing. so changes on a thing are found via command search? need to list use cases. 
 
 there will be lots of 'standard form' commands, like {noun add} and {noun set-type} and {my set collection :nouns}. can we do something useful with them? 
 
 {my set} becomes a fauxcommand which includes a call to {attr set} and has user:* exec perms.
 {attr set} allows setting of a things' attributes if you have perms on that thing. (superdo can bypass, natch)
 so... how do you know what a thing's schema is? for example, given @thing, is it @thing.name or @thing.my.name?
 is it {thing set-name} or {my set attr :name}? are these formally defined somewhere or ad hoc? 
 defined: discoverable, programatically constrained, but requires locking in the schema before building
 ad hoc: flexible, friendly, but difficult to generate knowledge of thing structure -- leading to confusion and "sample querying"
 we have a fixed mechanical schema. that exists, if only in our heads. why not make it formal? could aid in migration, also, when needed.
 then anything not covered in the schema is available for attr'ing. so you can have super-friendly attrs like @thing.name, without having to specify anything (by simply *not* putting them in the formal schema).
 so a {name set} fauxcommand and the ilk for things in general? and {my set} for user-created ad hoc attrs?
 
 commands are the atomic bottom. things are underneath that. most commands change one attr on one thing at a time. but some more complex ones might change many attrs on several things at once. we want to:
 - track changes to a thing over time
 - see the system at a particular moment in time
 - rewind and fast forward through time
 - allow unlimited undoability
 complex commands are like a transaction. so maybe commands are 'simple' (one thing/attr, undo means redo prior command w/ same params (id, maybe collection for {attr set}) but different value). 
 whereas a 'complex' command requires a custom 'undo' function as part of the command definition. so the bottom command itself contains information on the collection+attr. (automated for set-* style commands)
 
 also need to allow custom events in the event log, not just commands. this is important for... i don't know what. maybe those go in a different collection. command log for commands. error log for errors. event log for other things. maybe the event log is just there for attaching listeners? but if you're using a command for firing an event then that's going to go in the command log. so you could just trigger off of that...
 (so a no-op command that goes in the command log w/ a param and allows for attaching listeners? that seems weird... but maybe with some adjustment that's the right way to go.)
  
  
  
  something like a scatter-gather + stm, where you grab data from different urls in parallel and merge it into a data structure in a potentially overlapping fashion [photos from flickr plus tweets plus google news or something?, then arranged in circles that overlap or move?]
  
  
*/

// DAML var keys match /^[-_A-Za-z0-9]+$/ but don't match /^[_-]+$/ -- i.e. at least one alphanumeric
// this way we've got lots of room for fancy options for keys, like #N
// and also we can use something like {value: 5, to: {!:__}} in our pipeline vars, where the ! means 'check the state'

if (typeof exports !== 'undefined') {
  var _ = require('underscore')
  //     mmh = require('murmurhash3')
  // 
  // var murmurhash = mmh.murmur128HexSync
     
  if (typeof module !== 'undefined' && module.exports) {
    exports = module.exports = DAML
  }
  exports.DAML = DAML
}

DAML.CHANNELS = {}


/* DECORATORS! */

DAML.DECORATORS = []
DAML.DecoratorsByType = {}
DAML.DecoratorsByBlock = {}
DAML.DecoratorsByTypeBlock = {}

DAML.addDecorator = function(block_id, type, value, unique) {
  var decorator = { block: block_id
                  , type: type
                  , value: value }
    , existing_decorators
  
  if(unique) {
    existing_decorators = DAML.getDecorators(block_id, type)
    if(existing_decorators && existing_decorators.length) {
      return existing_decorators[0]
    }
  }
  
  if(!DAML.DecoratorsByType[type]) {
    DAML.DecoratorsByType[type] = []
  }
  if(!DAML.DecoratorsByBlock[block_id]) {
    DAML.DecoratorsByBlock[block_id] = []
  }
  if(!DAML.DecoratorsByTypeBlock[type + '-' + block_id]) {
    DAML.DecoratorsByTypeBlock[type + '-' + block_id] = []
  }
  
  DAML.DECORATORS.push(decorator)
  DAML.DecoratorsByType[type].push(decorator)
  DAML.DecoratorsByBlock[block_id].push(decorator)
  DAML.DecoratorsByTypeBlock[type + '-' + block_id].push(decorator)
  
  return decorator
}

DAML.getDecorators = function(by_block, by_type) {
  var decorators = DAML.DECORATORS
  
  if(!by_block) {
    if(by_type) {
      decorators = DAML.DecoratorsByType[by_type]
    }
  }
  else {
    if(by_type) {
      decorators = DAML.DecoratorsByTypeBlock[by_type + '-' + by_block]
    } else {
      decorators = DAML.DecoratorsByBlock[by_block]
    }
  }
  
  return decorators
}


/* PORTS! */

DAML.PORTFLAVOURS = {}

// A port flavour has a dir [in, out, out/in, in/out (inback outback? up down?)], and dock and add functions

DAML.import_port_type = function(flavour, pflav) {
  if(DAML.PORTFLAVOURS[flavour])
    return DAML.setError('That port flavour has already been im-port-ed')
  
  if(!pflav)
    return DAML.setError('That flavour is not desirable')

  if(typeof pflav.dock != 'function')
    pflav.dock = function(ship) {this.deliver(ship)}
  
  if(typeof pflav.add != 'function')
    pflav.add = function() {} // noop, so we can call w/o checking
  
  // if([pflav.dock, pflav.add].every(function(v) {return typeof v == 'function'}))
  //   return DAML.setError("That port flavour's properties are invalid")
  
  DAML.PORTFLAVOURS[flavour] = pflav
  return true
}

DAML.import_port_type('dom-value-track', {
  dir: 'in',
  add: function() {
    var element = document.getElementById(this.settings)
    
    if(!element) 
      return DAML.setError('That dom thing ("' + this.settings + '") is not present')
    
    if(!element.addEventListener)
      return DAML.setError('That dom thing has no addEventListener')
    
    var new_cb = function(e) {
      port.dock(this.value)
    }
    
    element.addEventListener('change', new_cb, false)
  }
})

// THINK: can we genericize this to handle both set-text & set-value?
DAML.import_port_type('dom-text-set', {
  dir: 'out',
  dock: function(value, callback) {
    var element = document.getElementById(this.settings)
    
    if(!element)
      return DAML.setError('That dom thing ("' + this.settings + '") is not present')
    
    if(!element.hasOwnProperty('innerText'))
      return DAML.setError('That dom thing has no innerText')
    
    element.innerText = DAML.stringify(value)
  },
  add: function() {
    // TODO: add hook to dom element to use in dock
    // BUT, only do this if you're in outer space... 
    // otherwise this works like a space-out port (where does the "implicit porting" live? is that above this level? probably.)
  }
})

DAML.import_port_type('dom-submit-trigger', {
  dir: 'out',
  dock: function(value, callback) {
    var element = document.getElementById(this.settings)
    
    if(!element)
      return DAML.setError('That dom thing ("' + this.settings + '") is not present')
    
    if(!element.submit)
      return DAML.setError('That dom thing has no innerText')
    
    element.submit()
  },
  add: function() {
    
  }
})

DAML.import_port_type('dom-submit-track', {
  dir: 'in',
  add: function(callback) {
    var element = document.getElementById(this.settings)
    
    if(!element) 
      return DAML.setError('That dom thing ("' + this.settings + '") is not present')
    
    if(!element.addEventListener)
      return DAML.setError('That dom thing has no addEventListener')
    
    var new_cb = function(e) {
      e.preventDefault() // THINK: not sure this is always desired...
      callback()
    }
    
    element.addEventListener('submit', new_cb, false)
  },
  dock: function(ship) {
    this.deliver(ship)
  }
})

DAML.import_port_type('space-in', {
  dir: 'in',
  add: function() {},
  dock: function(value) {    
    return this.space.deliver(value)
  }
})

DAML.import_port_type('space-out', {
  dir: 'out',
  dock: function(ship) {
    this.deliver(ship)
  },
  add: function(callback) {
    // this.space.listeners.push(callback)
  }
})


// THINK: these are the only two port flavours that stations use, and only stations use them. should we do something different with them? 
DAML.import_port_type('station-in', {
  dir: 'in',
  dock: function(value) {
    var space = this.settings.space
    
    if(!space)
      return DAML.setError('You seem to be lacking space')
    
    var scope = {'*in': value}
    
    return space.execute(this.settings.block, scope, null, this.listeners)
  },
  add: function(callback) {
    // var space = this.thing.space
    // 
    // if(!space)
    //   return DAML.setError('No space is available')
    // 
    // space.listeners.push(callback)
    
    this.listeners = this.listeners ? this.listeners.concat(callback) : [callback]
  }
})

DAML.import_port_type('station-out', {
  dir: 'out',
  dock: function(ship) {
    this.deliver(ship)
  },
  add: function(callback) {
    this.listeners = this.listeners ? this.listeners.concat(callback) : [callback]
  }
})

// DAML.import_port_type('server-ask', {
//   dir: 'sar',
//   dock: function(value) {
//     var space = this.settings.space
//     
//     if(!space)
//       return DAML.setError('You seem to be lacking space')
//     
//     var scope = {'*in': value}
//     
//     return space.execute(this.settings.block, scope)
//   },
//   add: function(callback) {
//     var space = this.settings.space
//     // var space = DAML.SPACESEEDS[this.thing.space]
//     
//     if(!space)
//       return DAML.setError('No space is available')
// 
//     space.listeners.push(callback)
//   }
// })

DAML.import_port_type('svg-move', {
  dir: 'out',
  dock: function(value) {
    var element = document.getElementById(value.settings)
    
    if(!element)
      return DAML.setError('You seem to be lacking elementary flair')
    
    if(element.x !== undefined) { // a regular element
      
      if(typeof value.x == 'number')
        element.x.baseVal.value = value.x
      if(typeof value.y == 'number')
        element.y.baseVal.value = value.y
    
      if(typeof value.dx == 'number')
        element.x.baseVal.value += value.dx
      if(typeof value.dy == 'number')
        element.y.baseVal.value += value.dy
    
    }
    else { // a g tag or some such
      
      var x = value.x
        , y = value.y
        , ctm = element.getCTM()
        
      if(typeof x != 'number')
        x = ctm.e
      if(typeof y != 'number')
        y = ctm.f
    
      if(typeof value.dx == 'number')
        x += value.dx
      if(typeof value.dy == 'number')
        y += value.dy
      
      element.setAttribute('transform', 'translate(' + x + ', ' + y + ')')
    }
        
  }
})

DAML.import_port_type('svg-rotate', {
  dir: 'out',
  dock: function(value) {
    var element = document.getElementById(value.settings)
    
    if(!element)
      return DAML.setError('You seem to be lacking elementary flair')
    
    var x = typeof value.x === 'number' ? value.x : element.x.baseVal.value + (element.width.baseVal.value / 2)
      , y = typeof value.y === 'number' ? value.y : element.y.baseVal.value + (element.height.baseVal.value / 2)
      , a = value.angle
      
    if(typeof a != 'number') {
      var ctm = element.getCTM()
      a = Math.atan2(ctm.b, ctm.a) / Math.PI * 180
    }
    
    if(typeof value.dangle == 'number')
      a += value.dangle
    
    element.setAttribute('transform', 'rotate(' + a + ' ' + x + ' ' + y + ')' )  
    
  }
})

DAML.import_port_type('svg-line-add', {
  dir: 'out',
  dock: function(value) {
    var element = document.getElementById(value.settings)
    
    if(!element)
      return DAML.setError('You seem to be lacking elementary flair')
    
    if(!element.getCTM)
      return DAML.setError("That doesn't look like an svg element to me")
    
    var x1 = value.x1 || 0
      , y1 = value.y1 || 0
      , x2 = value.x2 || 0
      , y2 = value.y2 || 0
    
    var newLine = document.createElementNS('http://www.w3.org/2000/svg', 'line')
    newLine.setAttribute('stroke', 'black')
    newLine.setAttribute('x1', x1)
    newLine.setAttribute('y1', y1)
    newLine.setAttribute('x2', x2)
    newLine.setAttribute('y2', y2)
    
    element.appendNode(newLine)
    
  }
})






/* FANCIES! */

DAML.FANCIES = {}
DAML.FancyGlyphs = ""
DAML.import_fancy = function(ch, obj) {
  if(typeof ch != 'string') return DAML.onerror('Fancy character must be a string')
  ch = ch[0] // only first char matters
  if(!DAML.FANCIES[ch]) {
    // TODO: check obj.eat
    DAML.FANCIES[ch] = obj
  } else {
    DAML.setError('Your fancies are more borken')
  }
  DAML.FancyGlyphs += ch
}

DAML.import_fancy(':', {
  eat: function(token) {
    // segment.type = 'String'
    // segment.value = segment.value.word
    // return [segment]
    token.type = 'String'
    token.value = token.value.slice(1)
    return [token] // this way we don't destroy the inputs and key and whatnot
    // return [new DAML.Token('String', token.value.slice(1))]
  }
})

DAML.import_fancy('_', {
  eat: function(token) {
    
    // if(token.value[1] == '>') {
    //   return [] // TODO: make this return the {var set} command
    // }
    
    token.type = 'PipeVar'
    
    // if(token.value == '__') // regular magic pipe
    //   return [token]
    
    var pieces = DAML.Parser.split_on(token.value, '.')
    token.value = pieces.shift()
    
    // token.value = '__' // TODO: this probably isn't right
    // token.value = token.value.slice(1)
    
    if(!pieces.length)
      return [token]
    
    // inline pathfind filtering    
    pieces = pieces.map(function(item) {
      if(item[0] != '{') return '"' + item + '"'
      return item
    })
    var path = new DAML.Token('List', pieces.join(' '))
    
    var pathfinder = new DAML.Token('Command', 'list pathfind')
    pathfinder.names = ['data', 'path']
    pathfinder.inputs = [token.key, path.key]
    
    return [token, path, pathfinder]
  }
})

DAML.import_fancy('$', {
  eat: function(token) {
    
    if(token.value[1] == '>') {
      return [] // TODO: make this return the {var set} command
    }
    
    // TODO: refactor this
    
    var pieces = DAML.Parser.split_on(token.value.slice(1), '.')
    var name = pieces.shift()
    
    token.type = 'Command'
    token.value = 'variable get name "' + name + '" type :space'
    
    if(!pieces.length)
      return [token]
    
    // inline pathfind filtering
    
    pieces = pieces.map(function(item) {
      if(item[0] != '{') return '"' + item + '"'
      return item
    })
    var path = new DAML.Token('List', pieces.join(' '))
    
    var pathfinder = new DAML.Token('Command', 'list pathfind')
    pathfinder.names = ['data', 'path']
    pathfinder.inputs = [token.key, path.key]
    
    return [token, path, pathfinder]
  }
})

DAML.import_fancy('@', {
  eat: function(token) {
    console.log(token)
    
    // @foo means {:foo}, i guess. should really figure out this gateway/channel thing...
    // >@foo means {gateway send message __ to :foo}, or something
    
    
    token.value = token.value.slice(1)
    token.type = 'String'
    
    return [token]
    
    
    
    // return [new DAML.Token('String', token.value.slice(1))]
    
    
    
    var direction = token.value[1]
      , channel_name = token.value.slice(2)
    
    token.type = 'Command'
    token.value = 'channel '
    
    if(direction == '<') {
      token.value += 'receive' // THINK: what does this even mean??
    }
    else if(direction == '>') {
      token.value += 'send'
    }
    else {
      DAML.setError('No viable direction')
      return []
    }

    token.value += ' name "' + channel_name + '"'
    return [token]
  }
})


/* TERMINATORS! */

DAML.terminators = {}
DAML.Tglyphs = ""
DAML.import_terminator = function(ch, obj) {
  if(typeof ch != 'string') return DAML.onerror('Terminator character must be a string')
  // ch = ch[0] // only first char matters
  if(!DAML.terminators[ch]) DAML.terminators[ch] = []
  DAML.terminators[ch].push(obj)
  DAML.Tglyphs += ch
}

// TODO: these should do more than just return a fancy parser...

DAML.terminate = function(ch, verb, params) {
  if(!DAML.terminators[ch]) return false
  var fun, terminators = DAML.terminators[ch]
  
  for(var i=0, l=terminators.length; i < l; i++) {
    fun = terminators[i][verb]
    if(typeof fun != 'function') continue
    fun.apply(terminators[i], params)
  }
}

DAML.import_terminator('|', { // pipe
  eat: function(stream, state) {
    stream.next()
    return 'bracket'
  }
})

DAML.import_terminator('^', { // lift
  eat: function(stream, state) {
    stream.next()
    return 'bracket'
  }
})

DAML.import_terminator('/', { // comment
  eat: function(stream, state) {
    while(stream.peek() === '/') stream.next()
    state.commentLevel++
    state.stack[state.stack.length-1].onTerminate.commentLevel-- // set parent's onTerminate
    // state.stack[state.stack.length-1].onClose.commentLevel-- // set parent's onClose
    return 'comment'
  }
})

DAML.import_terminator('→', { // lift
  eat: function(stream, state) {
    /// dum dum dum herpderp
  }
})



/* ALIASES! */


DAML.import_models = function(new_models) {
  _.each(new_models, function(model, model_key) {
    if(!DAML.models[model_key]) {
      DAML.models[model_key] = model
    } else {
      _.extend(DAML.models[model_key]['methods'], model['methods'])
    }
  })
}

DAML.import_aliases = function(values) {
  
  // TODO: move this inside Dialects
  // THINK: this only accepts fully-formed handler/method combos, with simple params (no new ablocks). is that ideal?
  
  _.each(values, function(value, key) {
    value = DAML.Parser.string_to_tokens('{' + value + '}')
    DAML.ALIASES[key] = value // do some checking or something
  })
}



/* TYPES! */


// DAML's type system is dynamic, weak, and latent, with implicit user-definable casting via type methods.
DAML.add_type = function(key, fun) {
  // TODO: add some type checking
  DAML.TYPES[key] = fun
};


DAML.add_type('string', function(value) {
  if(DAML.isBlock(value)) {
    return DAML.block_ref_to_string(value)
  }
  
  if(typeof value == 'string') value = value
  else if(typeof value == 'number') value = value + ""
  else if(typeof value == 'boolean') value = "" // THINK: we should only cast like this on output...
  else if(value && typeof value == 'object') value = JSON.stringify(value, function(key, value) {if(value===null) return ""; return value}) // OPT: sucking nulls out here is probably costly
  else if(value && value.toString) value = value.toString()
  else value = ''
  
  return value
})

DAML.add_type('number', function(value) {
  if(typeof value == 'number') value = value
  else if(typeof value == 'string') value = +value
  else if(typeof value == 'object') value = Object.keys(value).length // THINK: this is a little weird
  else value = 0

  return value
})

DAML.add_type('integer', function(value) {
  value = DAML.TYPES['number'](value) // TODO: make a simpler way to call these
  
  return Math.round(value)
})

DAML.add_type('anything', function(value) {
  if(!DAML.isNice(value)) return ""
  return value // THINK: what about blocks? 
})

DAML.add_type('array', function(value) { // ugh...
  return DAML.toArray(value)
})

DAML.add_type('list', function(value) {
  if(value && typeof value === 'object') 
    return value.type == 'Block' ? [value] : value
  return DAML.toArray(value)
})

DAML.add_type('maybe-list', function(value) {
  if(value === false || !DAML.isNice(value))
    return false
  else
    return DAML.TYPES['list'](value)
})

DAML.add_type('block', function(value) {
  if(DAML.isBlock(value)) {
    // value is a block ref...
    return function(prior_starter, scope) {
      // TODO: figure out the space issue
      // TODO: check value.value.id first, because it might not be in ABLOCKS
      // TODO: how does this fit with parent processes and parallelization? 
      var space = DAML.OuterSpace
      return space.REAL_execute(DAML.ABLOCKS[value.value.id], scope, prior_starter) 
    }
  }
  else {
    return function() {
      return DAML.stringify(value) // strings just fire away
    }
    // value = DAML.stringify(value)
    // return function(prior_starter) {
    //   return prior_starter(value) // strings just fire away
    // }
  }
})

DAML.add_type('either:block,string', function(value) {
  if(DAML.isBlock(value)) {
    return DAML.TYPES['block'](value)
  } else {
    return DAML.TYPES['string'](value)
  }
})

// [string] is a list of strings, block|string is a block or a string, and ""|list is false or a list (like maybe-list)


/*
  DAML.CONSTANTS = {}
  CONSTANTSFRY
  - OpenBrace
  - CloseBrace
  - OpenAngle
  - CloseAngle
*/



// DAML.run is a serialized endpoint. Most gateways are also. If you want raw data use spacial execution
DAML.run = function(daml, ultimate_callback, space) {
  if(!daml) return ""
  
  daml = "" + daml // TODO: ensure this is a string in a nicer fashion...
  
  if(!space) {
    space = DAML.OuterSpace
  }
  
  if(!ultimate_callback) {
    ultimate_callback = function(result) {
      // THINK: what should we do here?
      console.log(result)
    }
  }
  
  // THINK: can we refactor this into a different type of space.execute? can we convert this whole thing into a temporary channel on the space? with a 'log' type gateway or something?
  var prior_starter = function(value) {
    var result = DAML.execute_then_stringify(value, ultimate_callback)
    if(result === result) 
      ultimate_callback(result)
  }
    
  var result = space.execute(DAML.Parser.string_to_block_segment(daml), null, prior_starter)
  if(result === result)
    prior_starter(result)
  
  return ""
}


// Find some values for a variable path
DAML.resolve_path = function(words, base) {
  var word, index, temp, flat_value
    
  // TODO: we should probably allow DAML in the path, but we'll resolve it by translating that into a list for a filter function, where the DAML chunks get pulled out and processed inline with the rest of the segments instead of here in this brackish backwater 
  
  // if(path.indexOf(DAML.command_open) != -1) path = DAML.run(path);
  // if(!path) return base;
  // if(path.indexOf('.') == -1) return DAML.isNice(base[path]) ? base[path] : false;
  // words = path.split('.');

  if(typeof words == 'string') {
    words = DAML.Parser.split_on(words, '.')
  }

  if(!words.length) 
    return base
  // if(words.length == 1) 
  //   return DAML.isNice(base[words[0]]) ? base[words[0]] : false
  var value = base

  // value = base[words.shift()]; // THINK: this is by reference...

  
  for(var i=0, l=words.length; i < l; i++) {
    word = words[i];
    
    // if(typeof value == 'function') value = value(); // THINK: this shouldn't ever happen, right?
    
    if(!value) return value; // value has no depth and is falsy, so stop searching and return it
    
    // value is scalar, but there's more words to parse... so return false.
    if((/boolean|number|string/).test(typeof value)) return false;
    
    // unpack objects // THINK: why do we need this?
    // if(!(value instanceof Array)) value = value ? [value] : []; // THINK: value === 0?
    
    // for a hash, substitute value
    if(value.hasOwnProperty(word)) {
      value = value[word];
    }
    
    // for #-X, return the Xth item from the end
    else if(word[0] == '#' && word[1] == '-' && +word.slice(2)) {
      flat_value = _.toArray(value);
      index = flat_value.length - +word.slice(2);
      value = flat_value[index];
    }
    
    // for #X, return the Xth item
    else if(word[0] == '#' && +word.slice(1)) {
      // OPT: use a for-in here and shortcut it
      flat_value = _.toArray(value);
      value = flat_value[+word.slice(1) - 1];
    }
    
    // just in case we want every value of an array moved up a slot
    else if(word == '*') {
      temp = {};
      _.each(value, function(item, key) {
        if(typeof item == 'object') {
          _.each(item, function(inner_item, inner_key) {
            if(temp[inner_key]) temp[temp.length - 1] = inner_item;
            else temp[inner_key] = inner_item;
          });
        }
      });
      value = temp ? temp : false;
    }
    
    // for AoH, build new AoH
    else if(!+word && ( // THINK: no digits... something happens with integer ids, or something.
             typeof value[Object.keys(value)[0]] == 'object' ||
             (typeof value[Object.keys(value)[0]] == 'function' &&
               typeof value[Object.keys(value)[0]]() == 'object' 
             ) // yeah, this is kind of awful. but we have to check inside the array, and it might be full of funs.
           )) { // OPT: cache the above stuff for things and stuff.
      temp = [];
      _.each(value, function(item, key) {
        if(typeof item == 'function') item = item();
        if(typeof item == 'object' && word in item) {
          if(item[word] instanceof Array) { // item[word] is AoH, so pop H's
            for(var i=0, l=item[word].length; i < l; i++) {
              temp.push(item[word][i]);
            }
          }
          else { // item[word] is H
            temp.push(item[word]);
          }            
        }
      });

      // THINK: if word is bad should we return value? null? set a warning? -- this seems to work for now, but probably requires a lot more testing / use cases.
      if(temp) value = temp;
      else value = false;
    }
    
    // just give up
    else {
      value = false;
    }
  }

  return DAML.isNice(value) ? value : false;
};


// apply a function to every branch of a tree
// DAML.recursive_walk = function(values, fun, seen) {
//   if(!values || typeof values != 'object') return values;
// 
//   seen = seen || []; // only YOU can prevent infinite recursion...
//   if(seen.indexOf(values) !== -1) return values;
//   seen.push(values);
//   
//   for(var key in values) {
//     var value = values[key];
//     if(typeof value == 'object') values[key] = fun(DAML.recursive_walk(value, fun, seen))
//     else values[key] = value;
//   }
//   return values;
// };

// DFS over data. apply fun whenever pattern returns true. pattern and fun each take one arg.
// NOTE: no checks for infinite recursion. call DAML.scrub_var if you need it.
DAML.recursive_walk = function(data, pattern, fun) {
  var true_pattern = false
  
  try {
    true_pattern = pattern(data) // prevents bad pattern
  } catch (e) {}
  
  
  if(true_pattern) {
    try {
      fun(data) // prevents bad fun
    } catch (e) {}
  }
  
  if(!data || typeof data != 'object') return
  
  for(var key in data) {
    if(!data.hasOwnProperty(key)) return
    DAML.recursive_walk(data[key], pattern, fun)
  }
}

// apply a function to every leaf of a tree, but generate a new copy of it as we go
DAML.recursive_leaves_copy = function(values, fun, seen) {
  if(!values || typeof values != 'object') return fun(values);

  seen = seen || []; // only YOU can prevent infinite recursion...
  if(seen.indexOf(values) !== -1) return values;
  seen.push(values);
  
  var new_values = (Array.isArray(values) ? [] : {}); // NOTE: using new_values in the parse phase (rebuilding the object each time we hit this function) causes an order-of-magnitude slowdown. zoiks, indeed.
  
  for(var key in values) {
    // this is only called from toPrimitive and deep_copy, which both want blocks
    if(DAML.isBlock(values[key])) {
      new_values[key] = fun(values[key]); // blocks are immutable
    } else if(typeof values[key] == 'object') {
      new_values[key] = DAML.recursive_leaves_copy(values[key], fun, seen);
    } else {
      new_values[key] = fun(values[key]);
    }
  }

  return new_values;
};

// run every function in a tree (but not funs funs return)
DAML.recursive_run = function(values, seen) {
  if(DAML.isBlock(values)) return values;
  if(typeof values == 'function') return values();
  if(!values || typeof values != 'object') return values;
  
  seen = seen || []; // only YOU can prevent infinite recursion...
  if(seen.indexOf(values) !== -1) return values;
  seen.push(values);

  var new_values = (Array.isArray(values) ? [] : {});
  
  for(var key in values) {
    var value = values[key];
    if(typeof value == 'function') {
      new_values[key] = value();
    }
    else if(typeof value == 'object') {
      new_values[key] = DAML.recursive_run(value, seen);
    }
    else {
      new_values[key] = value;
    }
  }
  return new_values;
};

// NOTE: defunctionize does a deep clone of 'values', so the value returned does not == (pointers don't match)
// THINK: there may be cases where this doesn't actually deep clone...

// run functions in a tree until there aren't any left (runs funs funs return)
// DAML.defunctionize = function(values) {
//   if(!values) return values; // THINK: should we purge this of nasties first?
// 
//   if(values.__nodefunc) return values;
//   
//   if(DAML.isBlock(values)) return values.run(); // THINK: DAML.defunctionize(values.run()) ??  
//   if(typeof values == 'function') return DAML.defunctionize(values());
//   if(typeof values != 'object') return values;
//   
//   var new_values = (Array.isArray(values) ? [] : {});
// 
//   // this is a) a little weird b) probably slow and c) probably borked in old browsers.
//   Object.defineProperties(new_values, {
//     __nodefunc: {
//       value: true, 
//       enumerable:false
//     }
//   });
//   
//   for(var key in values) {
//     var value = values[key];
//     if(typeof value == 'function') new_values[key] = DAML.defunctionize(value());
//     else if(typeof value == 'object') new_values[key] = DAML.defunctionize(value); 
//     else new_values[key] = value;
//   }
//   
//   return new_values;
// };

// walk down into a list following the path, running a callback on each end-of-path item
DAML.recursive_path_walk = function(list, path, callback, parent) {
  if(typeof list != 'object') {
    if(!path) callback(list, parent); // done walking, let's eat
    return; 
  }

  // parents for child items
  // THINK: this is inefficient and stupid...
  var this_parent = {'parent': parent};
  for(var key in list) {
    this_parent[key] = list[key];
  }

  // end of the path?
  if(!path) {
    for(var key in list) {
      callback(list[key], this_parent);
    }
    return; // out of gas, going home
  }

  var first_dot = path.indexOf('.') >= 0 ? path.indexOf('.') : path.length;
  var part = path.slice(0, first_dot); // the first bit
  path = path.slice(first_dot + 1); // the remainder

  if(part == '*') {
    for(var key in list) {
      DAML.recursive_path_walk(list[key], path, callback, this_parent);
    }
  } else {
    if(typeof list[part] != 'undefined') {
      DAML.recursive_path_walk(list[part], path, callback, this_parent);
    }
  }
};

// this is different from recursive_merge, because it replaces subvalues instead of merging
DAML.recursive_insert = function(into, keys, value) {
  // THINK: we're not blocking infinite recursion here -- is it likely to ever happen?
  if(!into || typeof into != 'object') into = {};
  
  if(typeof keys == 'string') keys = keys.split('.');
  
  if(keys.length) {
    var key = keys.shift();
    into[key] = DAML.recursive_insert(into[key], keys, value);
  }
  else {
    into = value;
  }
  
  return into;
};

DAML.isNice = function(value) {
  return !!value || value == false; // not NaN, null, or undefined
  // return (!!value || (value === value && value !== null && value !== void 0)); // not NaN, null, or undefined
};

// this converts non-iterable items into a single-element array
DAML.toArray = function(value) {
  if(Array.isArray(value)) return Array.prototype.slice.call(value); // why clone it here?
  if(typeof value == 'object') return DAML.obj_to_array(value);
  if(value === false) return []; // hmmm...
  if(!DAML.isNice(value)) return []; // double hmmm.
  return [value];
};

DAML.obj_to_array = function(obj) {
  var arr = [];
  for(key in obj) {
    arr.push(obj[key]);
  }
  return arr;
};

// deep copy an internal variable (primitives and blocks only)
// NOTE: this is basically toPrimitive, for things that are already primitives. 
DAML.deep_copy = function(value) {
  if(!value || typeof value != 'object') return value; // number, string, or boolean
  if(DAML.isBlock(value)) return value; // blocks are immutable, so pass-by-ref is ok.
  return DAML.recursive_leaves_copy(value, DAML.deep_copy);
};

// copy and scrub a variable from the outside world
DAML.scrub_var = function(value) {
  try {
    return JSON.parse(JSON.stringify(value)); // this style of copying is A) the fastest deep copy on most platforms and B) gets rid of functions, which in this case is good (because we're importing from the outside world) and C) ignores prototypes (also good).
  } catch (e) {
    DAML.onerror('Your object has circular references');
    value = DAML.mean_defunctionize(value);
    if(value === null) value = false;
    return value;
  }
};

// this is like defunc, but not as nice -- it trashes funcs and snips circular refs
DAML.mean_defunctionize = function(values, seen) {
  if(!DAML.isNice(values)) return false;
  if(!values) return values;

  if(typeof values == 'function') return null;
  if(typeof values != 'object') return values; // number, string, or boolean

  seen = seen || []; // only YOU can prevent infinite recursion...
  if(seen.indexOf(values) !== -1) return null;
  seen.push(values);

  var new_values = (Array.isArray(values) ? [] : {});
  
  for(var key in values) { // list or hash: lish
    var new_value, value = values[key];
    new_value = DAML.mean_defunctionize(value, seen);
    if(new_value === null) continue;
    new_values[key] = new_value;
  }
  
  return new_values;
};




// DAML.execute = function(handler, method, params, prior_starter, process) {
//   var dialect = DAML.OuterSpace.dialect
//     , real_handler = dialect.get_handler(handler)
//     , real_method = dialect.get_method(handler, method)
//   
//   return real_method.fun.apply(real_handler, params, prior_starter, process)
// }




// DAML.Parser.split_string = function(string) {
//   var chunks = []
//     , chunk = ""
//   
//   while(chunk = DAML.Parser.get_next_thing(string)) {
//     string = string.slice(chunk.length)
// 
//     if(chunk[0] == DAML.command_open)
//       chunk = {block: chunk}
//       
//     chunks.push(chunk)
//   }
//   
//   /* "asdf {begin foo | string reverse} la{$x}la {end foo}{lkdjfj} askdfj" ==>
//        ["asdf ", 
//         {block: "{begin foo | string reverse} la{$x}la {end foo}"}, 
//         {block: "{lkdjfj}"}, 
//         " askdfj"]
//   */
//   
// 
//   return chunks
// }

DAML.Parser.get_next_thing = function(string, ignore_begin) {
  var first_open, next_open, next_closed
  
  first_open = next_open = next_closed = string.indexOf(DAML.command_open);
  
  if(first_open == -1) return string  // no DAML here
  if(first_open > 0) return string.slice(0, first_open)  // trim non-DAML head

  do {
    next_open = string.indexOf(DAML.command_open, next_open + 1)
    next_closed = string.indexOf(DAML.command_closed, next_closed) + 1
  } while(next_closed && next_open != -1 && next_closed > next_open)

  // TODO: add a different mode that returns the unfulfilled model / method etc (for autocomplete)
  if(!next_closed) {
    DAML.onerror("No closing brace for '" + string + "'")
    return string
  }

  if(ignore_begin || string.slice(0,7) != DAML.command_open + 'begin ')
    return string.slice(0, next_closed)  // not a block

  var block_name = string.match(/^\{begin (\w+)/)
  if(!block_name) {
    // FIXME: handle this situation better
    DAML.onerror(string, 'Something weird happened')
    return string
  }
  block_name = block_name[1];
  
  var end_tag = DAML.command_open + 'end ' + block_name + DAML.command_closed
    , end_begin = string.indexOf(end_tag)
    , end_end = end_begin + end_tag.length;
    
  if(!end_begin) {
    // FIXME: handle this situation better
    DAML.onerror(string, "No end tag for block '" + block_name + "'");
    return string;
  }
  
  // THINK: we're going to go ahead and deal with the block right here... is this the right place for this?
  // No, no it really isn't
  
  return string.slice(0, end_end);
}


DAML.Parser.string_to_block_segment = function(string) {
  var segment = DAML.Parser.segments_to_block_segment(DAML.Parser.string_to_segments(string))
    , block_id = segment.value.id
    // , decorators = DAML.getDecorators(block_id)
  
  DAML.addDecorator(block_id, 'OriginalString', string, true)
  // if(!decorators) {
  //   // TODO: check to ensure there's already an OriginalString for this
  //   // TODO: refactor
  //   // TODO: don't be dum
  //   decorators = (DAML.DECORATORS[block_id] = [])
  //   decorators.push({type: 'OriginalString', value: string})
  // }
    
  return segment
}

DAML.Parser.segments_to_block_segment = function(segments) {
  var wiring = {}
  
  segments = DAML.mungeLR(segments, DAML.TRANSFORMERS.Rekey)
  
  // TODO: refactor this into get_wiring or something
  for(var i=0, l=segments.length; i < l; i++) {
    var segment = segments[i]
    
    if(segment.inputs && segment.inputs.length) {
      wiring[segment.key] = segment.inputs
    }
    
    delete segment.key
    delete segment.prevkey
    delete segment.names
    delete segment.inputs
  }
  
  var block = new DAML.ABlock(segments, wiring)
    , segment = new DAML.Segment('Block', {id: block.id})
  
  return segment
}

DAML.Parser.pipeline_string_to_tokens = function(string) {
  var tokens = []
    , P = DAML.Parser
    , strings = []
  
  if(typeof string != 'string') 
    return string || []
  
  if(string.slice(0,7) == DAML.command_open + 'begin ') { // in a block
    var pipeline = DAML.Parser.get_next_thing(string, true)
      , block_name = pipeline.match(/^\{begin (\w+)/)[1] // TODO: this could fail
      , end_tag = DAML.command_open + 'end ' + block_name + DAML.command_closed
      , body = string.slice(pipeline.length, -end_tag.length)
      , segment = DAML.Parser.string_to_block_segment(body)

    pipeline = '"foo" ' + pipeline.slice(7+block_name.length, -1) // trim '{begin \w+' and trailing '}'
    strings = P.split_on_terminators(pipeline)
    strings[0] = '"' + body + '"'
  } 
  else {
    if(string[0] != '{' && string.slice(-1) != '}') {
      DAML.setError('That string is not a pipeline')
      return []
    }
  
    string = string.slice(1, -1)
  
    strings = P.split_on_terminators(string)
  }
  
  var new_tokens = P.strings_to_tokens(strings, true)
  
  // for(var i=0, l=new_tokens.length; i < l; i++) {
  //   if(!new_tokens[i].position)
  //     new_tokens[i].position = i+1
  // }
  
  if(new_tokens.length)
    new_tokens[0].prevkey = '*in'
  
  return new_tokens
}

DAML.Parser.strings_to_tokens = function(strings) {
  var tokens = []
    , extract_munger = ''
    , munge_munger = ''
    , P = DAML.Parser
  
  if(typeof strings == 'string') 
    strings = [strings]
  
  if(!strings.map)
    return []
  
  tokens = strings
           .map(P.lexify)
           .reduce(DAML.concat, [])
    
  extract_munger = function(L, token, R) { // TODO: refactor this
    var type = DAML.SegmentTypes[token.type]
    if(!type) return [L, R] // no know type
    if(!type.extract_tokens) return [L.concat(token), R]
    return type.extract_tokens(L, token, R) // for terminators etc
  }
  
  tokens = DAML.mungeLR(tokens, extract_munger)

  // for(var key in DAML.SegmentTypes) {
  //   var type = DAML.SegmentTypes[key]
  // }

      // TODO: this needs to run over each SegmentType for each item... like, if something shoves new stuff on the list, we need to scan all of that R stuff with each item before we move on, rather than scanning each item...
      // TODO: so have mungeLR invoke a FAMILY of functions.
      // USECASE: list inside command inside list inside command... likely borks.
      
  munge_munger = function(L, token, R) {
    var type = DAML.SegmentTypes[token.type]
    if(!type) return [L, R] // no know type
    if(!type.munge_tokens) return [L.concat(token), R]
    return type.munge_tokens(L, token, R)
  }
  
  tokens = DAML.mungeLR(tokens, munge_munger)
        
  return tokens
}

DAML.Parser.string_to_tokens = function(string) {
  var output = []
    , result = false
    , block_inputs = []
    , chunk = DAML.Parser.get_next_thing(string)
  
  if(chunk.length == string.length && chunk[0] == DAML.command_open) {
    // only one chunk, so make regular pipeline
    return DAML.Parser.pipeline_string_to_tokens(chunk)
  } 
  else {
    // make blockjoin
    do {
      string = string.slice(chunk.length)
      result = []

      if(chunk[0] == DAML.command_open) {
        result = DAML.Parser.pipeline_string_to_tokens(chunk)
      } else {
        result = [new DAML.Token('String', chunk)]
        // output.push(DAML.Parser.strings_to_tokens(chunk))
      }
      
      if(result.length) {
        output = output.concat(result)
        block_inputs.push(result[result.length - 1].key)
      }
    } while(chunk = DAML.Parser.get_next_thing(string))
    
    var joiner = new DAML.Token('Blockjoin', '')
    joiner.inputs = block_inputs
    output.push(joiner)
  }
  
  return output
  // return output.reduce(DAML.concat, [])
}

DAML.Parser.tokens_to_segments = function(tokens) {
  var segments = []
    , munger = ''
    , P = DAML.Parser
  
  segments = tokens.map(function(token) {return DAML.SegmentTypes[token.type].token_to_segments(token)})
                   .reduce(DAML.concat, [])
    
  // for(var key in DAML.SegmentTypes) {
  //   var type = DAML.SegmentTypes[key]
  //   
  //   if(!type.munge_segments)
  //     continue
  //   
  //   munger = function(L, segment, R) {
  // 
  //     if(segment.type != key) return [L.concat(segment), R]
  //     return type.munge_segments(L, segment, R)
  //   }
  // 
  //   segments = DAML.mungeLR(segments, munger)
  // }
  
  munger = function(L, segment, R) {
    var type = DAML.SegmentTypes[segment.type]
    if(!type) return [L, R] // no know type
    if(!type.munge_segments) return [L.concat(segment), R]
    return type.munge_segments(L, segment, R)
  }
  
  segments = DAML.mungeLR(segments, munger)
  
  return segments
}


DAML.Parser.string_to_segments = function(string) {
  return DAML.Parser.tokens_to_segments(DAML.Parser.string_to_tokens(string))
}


/// NOTE: this always returns an ARRAY of tokens!
DAML.Parser.lexify = function(string) {
  var P = DAML.Parser
    , types = Object.keys(DAML.SegmentTypes)
    , lexers = types.map(function(type) {return DAML.SegmentTypes[type].try_lex})

  if(string.trim)
    string = string.trim() // THINK: is there a better place for this?
               
  for(var i=0, l=lexers.length; i < l; i++) {
    if(typeof string != 'string')
      return Array.isArray(string) ? string : [string]
    
    string = lexers[i](string)
  }

  return Array.isArray(string) ? string : [string]
}



// DAML.partially_apply = function(fun, arg, number) {
//   
// }

// DAML.maybe_call = function(member) {
//   return function(item) {
//     if(typeof item.member == 'function') {
//       return item.member()
//     }
//   }
// }



DAML.block_ref_to_string = function(value) {
  // var json = JSON.stringify(value)
  // return json.slice(1, -1) // JSON puts extra quotes around the string value that we don't want
  return value.toJSON()
}



/*
  each Transformer takes a left-set of segments, the segment in question, and a right-set of segments. 
  it returns the new left and right set. the next segment from the right set is then considered, until no items remain.
  for now, all the fancy and terminator code is stuffed into these two functions.
  TODO: split out the fancys and terminators so they're added like types.
*/
DAML.TRANSFORMERS = {}



DAML.TRANSFORMERS.Rekey = function(L, segment, R) {
  var old_key = segment.key
    , new_key = L.length
    
  // TODO: holymuckymuck, is this ever ugly and slow. clean me!
  for(var i=0, l=R.length; i < l; i++) {
    var future_segment = R[i]
      , index
      
    if(future_segment.inputs) {
      while(true) {
        index = future_segment.inputs.indexOf(old_key)
        if(index == -1) break
        future_segment.inputs[index] = new_key
      }
    }
  }

  segment.key = new_key
  return [L.concat(segment), R]
}



DAML.ABlock = function(segments, wiring) {
  // // soooooo... this assumes head is a bunch of segments OR body is a bunch of strings or ABlocks. right. gotcha.
  // 
  // if(head) {
  //   // ensure it's an array of Segments, I suppose...
  //   this.head = head
  // }
  // 
  // if(body) {
  //   // TODO: filter out extracted blocks
  //   
  //   // ensure it's an array of strings and ABlocks, then take the string or block's id
  //   if(body.some && !body.some(function(item) {return (typeof item != 'string') && !item.id}).length) {
  //     this.body = body.filter(function(item) { return !item.adjunct })
  //                     .map(function(item) { return (typeof item == 'string') ? item : {'block': item.id} })
  //      // THINK: this 'block' bit is a bod block ref. should we use segments here instead?
  //   }
  // }
  // 
  // if(!this.head && !this.body) // THINK: when does this happen? what should we return?
  //   this.body = [] 
  
  if(!Array.isArray(segments))
    segments = []
  
  // TODO: ensure all segments are segments

  if(!wiring || (typeof wiring != 'object'))
    wiring = {}
  
  this.segments = segments
  this.wiring = wiring
  
  var json = JSON.stringify(this)
    , hash = murmurhash(json)
    
  // THINK: take this out and put it elsewhere? or... how is block access limited? or... huh.
  if(!DAML.ABLOCKS[hash])
    DAML.ABLOCKS[hash] = this
  
  this.id = hash
}

/*
  head is an array of Segment objects, which look like {
    type: ""
    value: ...
    params: {}
    ins: {}
    outs: []
  }
  required:
  type is Number, String, List, Command, Alias, Block 
    --> during processing, various transformer types are available (currently Terminator and Fancy)
  value is {Handler: "", Method: ""} for Command, raw value otherwise
  optional:
  params is an 1D key/value for Command or Alias with "!" as implicit key and NULL for referenced values
  ins' keys are param keys, values are previous outs
  outs are labels for partial products
  
  Block is a block reference -- typically hash id
  Transformers are processed prior to ABlockiness (currently terminators and fancy)
  Aliases are converted to Commands prior to PBlockiness (and Command values are then enhanced with method pointer)
*/

DAML.process_counter = 1
DAML.token_counter = 1

DAML.Token = function(type, value) {
  this.key = DAML.token_counter++
  this.type = type
  this.value = value
}

DAML.Segment = function(type, value, token) {
  this.type = type || 'String'
  this.value = DAML.isNice(value) ? value : ""
  
  if(!token) 
    token = {}
  
  this.prevkey = token.prevkey || false
  this.names = token.names || []
  this.inputs = token.inputs || []
  this.key = token.key || false


  // TODO: refactor the above... oy. pseudosegments vs real segments, default values, etc...
    
  /*
    Segments also have
    params -- commands have these (it's a hash of segments)
    paramlist -- params post-dialecticalization
    method -- post-d, for Command segments
    
    Segment types: 
      paramable: String, Number, Block, Input, Null (for alias dangling params) 
      paramfree: List, Command, Alias
      temporary: Fing, Begin, Fancy, Pipeline
      
    ABlock segments (and beyond) have their keys changed to pipeline position and Input segments remapped
  */
}

DAML.Segment.prototype.toJSON = function() {
  var type = DAML.SegmentTypes[this.type]
  
  // THINK: unfortunately this is triggered by ABlock() before murmurhashing, which probably will screw something up someday.
  
  if(type && type.toJSON) {
    return type.toJSON(this)
  } else {
    return JSON.stringify(this.value)
  }
}

// THINK: how do we allow storage / performance optimizations in the segment structure -- like, how do we fill in the params ahead of time? 


DAML.SegmentTypes = {}

DAML.SegmentTypes.Terminator = {
  try_lex: function(string) {
    return string // THINK: hmmmm.... these are made elsewhere. what are we doing??
  }
, extract_tokens: function(L, token, R) {
    // LE COMMENTS
    if(/^\//.test(token.value)) {
      if(/^\/\//.test(token.value)) {
        return [L, []] // double slash comment goes to end of pipe
      }
      R.shift() // a single slash comment just pops the next segment off
    }

    // LE ARROW
    if(/^→/.test(token.value)) {
      var next = R[0]
        , prev = L[L.length - 1]

      if(!next || !prev)
        return [L, R] // if we aren't infix, don't bother

      var new_token = new DAML.Token('Command', 'channel bind')
      new_token.names = ['from', 'to']
      new_token.inputs = [prev.key, next.key]
      
      return [L, [next, new_token].concat(R.slice(1))]
    }

    // LE PIPE
    if(/^\|/.test(token.value)) {
      var next = R[0]
        , prev = L[L.length - 1]

      /*
        Pipes connect the next and prev segments.
        Double pipes don't change the wiring.
        Double pipe at the end cancels output.
      */


      // TODO: what if 'next' is eg a comment?
      // TODO: double pipe means something different
      // TODO: pipe at beginning / end (double pipe at end is common)

      // set the prevkey
      if(next) {
        if(prev) {
          next.prevkey = prev.key
        } else {
          next.prevkey = '*in' // THINK: really? this only applies to  {| add __} which is weird and stupid
        }
      }

      // bind the segments
      if(/^\|\|/.test(token.value)) { // double pipe
        if(!next) {
          R = [new DAML.Token('String', "")] // squelch output by returning empty string
        }
      }
      else if(next && prev) {
        // if(next.value.params) {
        //   next.value.params['__pipe__'] = prev.key
        // }
        
        if(next.type == 'Command') {
          next.names = next.names || [] // TODO: fix me this is horrible
          next.inputs = next.inputs || []
          next.names.push('__pipe__')
          next.inputs.push(prev.key)
          // next.params['__pipe__'] = new DAML.Segment('Input', prev.key)      
          // return [L, R]
        }
        
      }
    }

    return [L, R]
  }
, token_to_segments: function(token) {
    return []
    // this shouldn't happen
  } 
, execute: function(segment) {
    // nor this
  }
}

DAML.SegmentTypes.Number = {
  try_lex: function(string) {
    return (+string === +string) ? new DAML.Token('Number', string) : string // NaN !== NaN
  }
, token_to_segments: function(token) {
    return [new DAML.Segment('Number', +token.value, token)]
  } 
, execute: function(segment) {
    return segment.value
  }
}

DAML.SegmentTypes.String = {
  try_lex: function(string) {
    if(string[0] != '"' || string.slice(-1) != '"')
      return string    

    if(string.indexOf(DAML.command_open) != -1)
      return string

    return new DAML.Token('String', string.slice(1, -1))
  }
, token_to_segments: function(token) {
    return [new DAML.Segment('String', token.value, token)]
  }
, execute: function(segment) {
    return segment.value
  }
}

DAML.SegmentTypes.Block = {
  try_lex: function(string) {
    if(string[0] != '"' || string.slice(-1) != '"')
      return string    

    if(string.indexOf(DAML.command_open) == -1)
      return string

    return new DAML.Token('Block', string.slice(1, -1))
  }
, token_to_segments: function(token) {
    var segment = DAML.Parser.string_to_block_segment(token.value)
    segment.key = token.key
    return [segment]
  }
, toJSON: function(segment) {
    var block_id = segment.value.id
      , decorators = DAML.getDecorators(block_id, 'OriginalString')
      
    if(decorators) {
      return decorators[0].value
    }
    
    return ""
  }
, execute: function(segment, inputs, dialect, prior_starter) {
    return segment
  }
}


// puts together discrete segments, or something
DAML.SegmentTypes.Blockjoin = {
  try_lex: function(string) {
    return string
    // these probably never get lexed
  }
, token_to_segments: function(token) {
    return [new DAML.Segment('Blockjoin', token.value, token)]
  }
, execute: function(segment, inputs, dialect, prior_starter) {
    var output = ""
      , counter = 0
    
    if(!inputs.length)
      return ""

    return DAML.dataTrampoline(inputs, DAML.execute_then_stringify, DAML.string_concat, prior_starter)
  }
}

DAML.SegmentTypes.Pipeline = {
  try_lex: function(string) {
    if(string[0] != DAML.command_open || string.slice(-1) != DAML.command_closed)
      return string

    return new DAML.Token('Pipeline', string)
  }
, munge_tokens: function(L, token, R) {
    var new_tokens = DAML.Parser.string_to_tokens(token.value)
    
    var last_replacement = new_tokens[new_tokens.length - 1]
    
    if(!last_replacement){
      // DAML.setError('The previous replacement does not exist')
      return [L, R]
    }
    
    last_replacement.key = token.key
    // last_replacement.prevkey = token.prevkey
    // last_replacement.position = token.position
    // last_replacement.inputs.concat(token.inputs)
    // last_replacement.names.concat(token.names)
    
    // if(new_tokens.length)
    //   new_tokens[0].position = true
    
    return [L, new_tokens.concat(R)] // NOTE: the new tokens are *pre* munged, and shouldn't contain fancy segments 
    
  }
, token_to_segments: function(token) {
    // shouldn't ever get here...
    return []
  }
, execute: function(segment) {
    // shouldn't ever get here
  }
}

DAML.SegmentTypes.List = {
  try_lex: function(string) {
    if(string[0] != '(' || string.slice(-1) != ')')
      return string

    return new DAML.Token('List', string.slice(1, -1))
  }
, munge_tokens: function(L, token, R) {
    if(token.done)
      return [L.concat(token), R]
  
    var new_token_sets = DAML.Parser.split_on_space(token.value)
                                    .map(DAML.Parser.strings_to_tokens)

    if(!new_token_sets.length)
      return [L.concat(token), R]
      
    token.inputs = token.inputs || []
    token.done = true
    
    // it's important to only take inputs from the last token to prevent double linking of nested lists and pipelines
    for(var i=0, l=new_token_sets.length; i < l; i++) {
      var last_new_token_from_this_set_oy_vey = new_token_sets[i][new_token_sets[i].length - 1]
      if(last_new_token_from_this_set_oy_vey && last_new_token_from_this_set_oy_vey.key)
        token.inputs.push(last_new_token_from_this_set_oy_vey.key)
    }
    
    var new_tokens = new_token_sets.reduce(DAML.concat, [])

    /* what we need here:
       - all 'top' magic pipes point to previous segment
       - except magic pipes in pipelines
       
       
    */

    for(var i=0, l=new_tokens.length; i < l; i++) {
      if(!new_tokens[i].prevkey)
        new_tokens[i].prevkey = token.prevkey
    }

    return [L, new_tokens.concat(token, R)]
  }
, token_to_segments: function(token) {
    return [new DAML.Segment('List', [], token)]
  }
, execute: function(segment, inputs) {
    return inputs
  }
}

DAML.SegmentTypes.Fancy = {
  try_lex: function(string) {
    var regex = new RegExp('^[' + DAML.FancyGlyphs + ']') // THINK: would anything else ever start with a fancy glyph?

    if(regex.test(string)) 
      return new DAML.Token('Fancy', string)

    return string
  }
, munge_tokens: function(L, token, R) {
    var glyph = token.value.slice(0,1)
  
    if(!DAML.FANCIES[glyph]) {
      DAML.setError('Your fancies are borken')
      return [L, R]
    }

    var new_tokens = DAML.FANCIES[glyph].eat(token)

    return [L, new_tokens.concat(R)] 
    // NOTE: the new tokens are *pre* munged, and shouldn't contain fancy segments [erp nope!]
    // THINK: but what about wiring???
  }
, token_to_segments: function(token) {
    // you shouldn't ever get here
  }
, execute: function(segment) {
    // or here
  }
}

// THINK: TODO: OPT: pushing pipeline vars into the block wiring is really smart and fast, but complicated so we're doing something simpler for now.

DAML.SegmentTypes.PipeVar = {
  try_lex: function(string) {
    return string // these are always created as Fancy tokens
  }
, munge_tokens: function(L, token, R) {
    if(token.value == '__') {
      // if(L.length || R.length)
        return [L.concat(token), R]
      
      // __ is the last token in the pipeline
      // token.type = 'Command'
      // token.value = 'variable get name "*in" type :pipeline' // THINK: this is pretty weird
      // return [L, [token].concat(R)]
    }
    
    // ceci n'est pas une pipe magique
    
    /*
    
      We have to munge this here instead of during Fancyization because we need L and R to distinguish the following cases (which we aren't doing yet but should).
     
      CASE 1: {(1 2 3) | >_a | (_a _a _a)}
        --> TODO: compile _a into the wiring
          
      CASE 2: {* (:a 1 :b 2) | merge block "{_a} x {_b}"}
        --> have to use {var get} to collect the values at runtime instead of compiling them into the wiring, 
            because this use reflects the shape of the data rather than an arbitrary intermediate label

    */
    
    
    
    var name = token.value.slice(1)

    token.type = 'Command'
    token.value = 'variable get name "' + name + '" type :pipeline'
    
    return [L, [token].concat(R)]

  }
, token_to_segments: function(token) {
    return [new DAML.Segment(token.type, token.value, token)]
  }
, munge_segments: function(L, segment, R) {
    // first, figure out what we're wired to
    var my_key = segment.key
      , new_key = segment.prevkey
      , outputs = R.filter(function(segment) {
                            return segment.inputs.indexOf(my_key) != -1
                          })

    // this is a magic pipe
    
    /*
      CASES:
        1: {__ | ...}
    
        2: {2 | __}
    
        3: {3 | __ | ...}
        
        4: {__}
    
        5: {(__)}
        
        1, 4, and 5 are all the same case -- they access the process input. 2 and 3 are the normal case of passing along the previous segment value. 
        
    */
    
    
    // if(!outputs.length) { // nothing to do
    //   return [L, R]
    // }

    if(!segment.prevkey) { // first in our class
      // console.log(segment, 'yo!!!')
      new_key = '*in'
    }
    // else {
    //   // get the previous *top* segment's key
    //   for(var i=L.length-1; i >= 0; i--) {
    //     if(L[i].top) {
    //       new_key = L[i].key
    //       break
    //     }
    //   }
    // 
    //   if(new_key === segment.value) {
    //     if(L.length) {
    //       new_key = L[L.length-1].key // THINK: first segment doesn't get marked as top, so we grab it here anyway
    //     } else {
    //       new_key = '*in' // nothing prior to __ so we give it *in for Process operating context
    //     }
    //   }      
    // }
    
    // finally replace our key with the previous key
    outputs.forEach(function(future_segment) {
      var pipe_index = future_segment.names.indexOf('__pipe__')
        , this_key = new_key
        , key_index
      
      if(new_key !== '*in'     // not 'first'
      && pipe_index !== -1  // is piped
      && my_key != future_segment.inputs[pipe_index]) { // not piped to pipevar
        this_key = future_segment.inputs[pipe_index]    // then keep on piping (mostly for aliases)
      }
      
      while((key_index = future_segment.inputs.indexOf(my_key)) >= 0) {
        future_segment.inputs[key_index] = this_key
        // segment.inputs[key_index] =  new_key
      }
      
      // TODO: make this work for multiple connections (can those exist? [yes they can])
    })
    
    if(R.length && R[0].type == 'PipeVar') {
      // handles the weird case of {(1 2 3) | map block "{__ | __}"}
      R[0].prevkey = new_key
    } 
    
    
    if(!R.length && segment.prevkey == '*in') {
      
      /* 
        oy. so maybe a 'passthru' command? maybe state[-1] becomes state[__] and we hit that instead? maybe...
      
      */

      L = L.concat(DAML.Parser.string_to_segments('{variable get name :*in type :pipeline}'))
      
      // L = L.concat(
      // [ new DAML.Segment('String', '*in')
      // , new DAML.Segment('String', 'pipeline')
      // , new DAML.Segment('Command', {Handler: 'variable', Method: 'get'})
      // ])
      
      // console.log(L, segment, R)
      // debugger
    }
    
    return [L, R]
    
    // OPT: do this in a single pass, dude
  } 
, execute: function(segment) {
    // nor this
  }
}

DAML.SegmentTypes.Command = {
  try_lex: function(string) {
    if(!/[a-z]/.test(string[0])) // TODO: move all regexs into a single constants farm
      return string

    return new DAML.Token('Command', string)
  }
, munge_tokens: function(L, token, R) {
    if(token.done)
      return [L.concat(token), R]
      
    var items = DAML.Parser.split_on_space(token.value)
      , new_tokens = []
      
    token.names = token.names || []
    token.inputs = token.inputs || []
    
    if(items.length == 1) {  // {math}
      token.type = 'Alias'
      token.value = {word: items[0]}
      items = []
    }

    else if(items.length == 2) {
      if(/^[a-z]/.test(items[1])) {  // {math add}
        token.type = 'Command'
        token.value = {Handler: items[0], Method: items[1]}
      }
      else {  // {add 1}
        token.type = 'Alias'
        token.value = {word: items[0]}
        token.names.push('__alias__')
        
        var value = items[1]
          , some_tokens = DAML.Parser.strings_to_tokens(value)
          , some_token = some_tokens[some_tokens.length - 1] || {}
        
        token.inputs.push(some_token.key || null)
        new_tokens = new_tokens.concat(some_tokens)
        // new_tokens = new_tokens.concat(DAML.Parser.strings_to_tokens(items[1]))
      }

      items = []
    }

    else if(!/^[a-z]/.test(items[1])) {  // {add 1 to 3}
      token.type = 'Alias'
      token.value = {word: items[0]}
      items[0] = '__alias__'
    }
    else if(!/^[a-z]/.test(items[2])) {  // {add to 1}
      token.type = 'Alias'
      token.value = {word: items[0]}
      items.shift() // OPT: these shifts are probably slow...
    }
    else {  // {math add value 1}
      // collect H & M
      token.type = 'Command'
      token.value = { Handler: items.shift()
                    , Method: items.shift()}
    }

    // collect params
    while(items.length) {
      var word = items.shift()

      if(!/^[a-z]/.test(word) && word != '__alias__') { // ugh derp
        DAML.setError('Invalid parameter name "' + word + '" for "' + JSON.stringify(token.value) + '"')
        if(items.length)
          items.shift()
        continue
      }

      if(!items.length) { // THINK: ???
        // params[word] = null
        token.names.push(word)
        token.inputs.push(null)
        continue
      }

      var value = items.shift()
        , some_tokens = DAML.Parser.strings_to_tokens(value)
        , some_token = some_tokens[some_tokens.length - 1] || {}
        
      token.names.push(word)
      token.inputs.push(some_token.key || null)
      new_tokens = new_tokens.concat(some_tokens)
      
      // params[word] = DAML.Parser.strings_to_tokens(value)[0] // THINK: is taking the first one always right?
    }
    
    for(var i=0, l=new_tokens.length; i < l; i++) {
      if(!new_tokens[i].prevkey)
        new_tokens[i].prevkey = token.prevkey
    }
    
    // if(!new_tokens.length)
    //   return [L.concat(token), R]
      
    token.done = true

    // for(var i=0, l=new_tokens.length; i < l; i++)
    //   token.inputs.push(new_tokens[i].key)

    return [L, new_tokens.concat(token, R)] // aliases need to be reconverted even if there's no new tokens
  }
, token_to_segments: function(token) {
    token.value.names = token.names
    // TODO: suck out any remaining null params here
    return [new DAML.Segment(token.type, token.value, token)]
  }
, execute: function(segment, inputs, dialect, prior_starter, process) {
    var handler = dialect.get_handler(segment.value.Handler)
      , method = dialect.get_method(segment.value.Handler, segment.value.Method)

    if(!method) {
      // THINK: error?
      DAML.setError('You have failed to provide an adequate method: ' + segment.value.Handler + ' ' + segment.value.Method)
      return "" // THINK: maybe {} or {noop: true} or something, so that false flows through instead of previous value
    }
    
    var piped = false
      , params = []
      , errors = []
      , typefun
    
    // build paramlist, a properly ordered list of input values
    for(var index in method.params) {
      var method_param = method.params[index]
      var param_value = undefined
      var key = method_param.key
      var name_index = segment.value.names.indexOf(key)
      
      if(name_index != -1) {
        param_value = inputs[name_index]
      }
      
      if(!piped && !DAML.isNice(param_value)) {
        name_index = segment.value.names.indexOf('__pipe__')
        piped = true
        if(name_index != -1) {
          param_value = inputs[name_index]
        }
      }
  
      if(method_param.type && DAML.TYPES[method_param.type])
        typefun = DAML.TYPES[method_param.type]
      else
        typefun = DAML.TYPES.anything
  
      if(param_value !== undefined) {
        param_value = typefun(param_value)
      }
      else if(method_param.fallback) {
        param_value = typefun(method_param.fallback)
      }
      else if(method_param.required) {
        errors.push('Missing required parameter "' + method_param.key + '" for command "' + segment.value.Handler + " " + segment.value.Method + '"')
        param_value = typefun(undefined)
      }
      else if(!method_param.undefined) {
        param_value = typefun(undefined)
      }
      
      params.push(param_value)
    }
      
    if(!errors.length) {
      return method.fun.apply(handler, params.concat(prior_starter, process))
    } else {
      errors.forEach(function(error) {
        DAML.setError(error)
      })
      return ""
    }
  }
}

DAML.SegmentTypes.Alias = {
  try_lex: function(string) {
    return new DAML.Token('Command', string) // THINK: this is weird...
    // return new DAML.Token('Alias', string) // NOTE: this has to run last...
  }
, munge_tokens: function(L, token, R) {
    var new_tokens = DAML.ALIASES[token.value.word]
    
    if(!new_tokens) {
      DAML.setError("The alias '" + token.value.word + "' stares at you blankly")
      return [L, R]
    }
    
    new_tokens =  DAML.clone(new_tokens)

    // fiddle with wiring
    
    var last_replacement = new_tokens[new_tokens.length - 1]
    
    if(!last_replacement) {
      // first in line, so no previous wiring... curiously, this works in {(1 2 3) | map block "{add __ to 3}"}
      return [L, R]
    }
    
    last_replacement.key = token.key
    last_replacement.prevkey = token.prevkey
    // last_replacement.inputs.concat(token.inputs)
    // last_replacement.names.concat(token.names)
    
    for(var i=0, l=new_tokens.length; i < l; i++) {
      if(!new_tokens[i].prevkey || new_tokens[i].prevkey == '*in') // for __ in aliases like 'else'
        new_tokens[i].prevkey = token.prevkey
    }
    
    if(token.names) {
      // last_replacement.params = last_replacement.params || {}
    
      for(var i=0, l=token.names.length; i < l; i++) {
        var key = token.names[i]
          , value = token.inputs[i]
          , lr_index = last_replacement.names.indexOf(key)
          , lr_position = lr_index == -1 ? last_replacement.names.length : lr_index
          , lr_null_index = last_replacement.inputs.indexOf(null)
        
        if(key == '__pipe__') { // always add the __pipe__
          last_replacement.names[lr_position] = '__pipe__'
          last_replacement.inputs[lr_position] = value 
        }
        else if(key == '__alias__') { // find last_replacement's dangling param
          if(lr_null_index != -1) {
            last_replacement.inputs[lr_null_index] = value
          }
        }
        else if(lr_index == -1) { // unoccupied param
          last_replacement.names.push(key)
          last_replacement.inputs.push(value)
        }
      }
      
    }

    return [L.concat(new_tokens), R] // NOTE: the new tokens are *pre* munged, and shouldn't contain fancy segments 
  }
, token_to_segments: function(token) {
    // token.value.names = token.names
    // return [new DAML.Segment('Alias', token.value, token)]
  }
, execute: function(segment, inputs, dialect) {
    // shouldn't happen
  }
}


// DAML.Parser.try_begin = function(string) {
//   var matches = string.match(/^begin (.?\w+)/)
//   if(!matches) return string
//   
//   return [new DAML.Segment('Begin', matches[1])]
// }


// DAML.Dialect = function(models, aliases, parent) {
DAML.Dialect = function(models, parent) {
  this.models = models
  // this.aliases = aliases
  this.parent = parent
}

DAML.Dialect.prototype.get_handler = function(handler) {
  if(  handler 
    && this.models
    && this.models[handler]
    && this.models[handler]
  ) {
    return this.models[handler]
  }

  return false
}

DAML.Dialect.prototype.get_method = function(handler, method) {
  if(  handler 
    && method
    && this.models
    && this.models[handler]
    && this.models[handler].methods
    && this.models[handler].methods[method]
  ) {
    return this.models[handler].methods[method]
  }

  return false
}

DAML.DIALECTS.top = new DAML.Dialect(DAML.models)


/*
  We could consider having a NULL global value. nothing would return it. 
  undefined variables are NULL. a param set to NULL like {math add value (1 2 3) to NULL} will drop the param (so that would return 6). as opposed to {math add value (1 2 3) to FALSE} which would return (1 2 3) or {math add value (1 2 3) to TRUE} which would return (2 3 4)

  yuck type conversions yuck yuck. 
  maybe just NULL and not TRUE/FALSE? what's the use case for those again?
*/

DAML.get_block = function(ablock_or_segment) {
  if(!ablock_or_segment)
    return new DAML.ABlock()
  if(ablock_or_segment.segments)
    return ablock_or_segment
  else if(ablock_or_segment.value && ablock_or_segment.value.id && DAML.ABLOCKS[ablock_or_segment.value.id])
    return DAML.ABLOCKS[ablock_or_segment.value.id]
  else
    return new DAML.ABlock()
}



/*

  Adding a new SPACESEED is complicated.
  - does it have an id?
    - remove if != hash(json)
  - do the parts check out? 
    - if dialect, stations, subspaces, ports, routes or state are invalid, err
  - order all the parts
  - hash, add, and return id

*/

DAML.spaceseed_add = function(seed) {
  var good_props = {dialect: 1, stations: 1, subspaces: 1, ports: 1, routes: 1, state: 1}
  
  for(var key in seed) 
    if(!good_props[key])
      delete seed[key] // ensure no errant properties, including id
  
  // TODO: check dialect [id -> DAML.DIALECTS]
  // TODO: check stations [array of id -> DAML.ABLOCKS]
  // TODO: check subspaces [array of id -> DAML.SPACESEEDS]
  // TODO: check ports [array of port things]
  // TODO: check routes [array of port indices]
  // TODO: check state [a jsonifiable object] [badseeds]
  
  seed = JSON.parse(JSON.stringify(seed)) // keep the ref popo off our tails
  seed = DAML.sort_object_keys(seed)
  seed.state = DAML.sort_object_keys(seed.state)
  
  if(seed.stations != seed.stations.sort()) {
    // we have to manually sort them, because we have to keep their ports updated...
    var station_index_to_ports = {}
      , newseeds = []
      
    for(var key in ports) {
      if(!ports[key].station) continue
      var item = station_index_to_ports[ports[key].station]
      item.push ? item.push(port) : item = [port]
    }
    
    // OPT: this is, uh, horribly unperformant. please fix.
    while(seed.stations.length) {
      var max = Math.max.apply(seed.stations)
        , index = seed.stations.indexOf(max)
        , new_index = newseeds.length

      newseeds.push(max)

      station_index_to_ports[index].forEach(function(port) {
        port.station = new_index
      })
      
      seed.stations.splice(index, 1)
    }
  }

  if(seed.subspaces != seed.subspaces.sort()) {
    // we have to manually sort them, because we have to keep their ports updated...
    var station_index_to_ports = {}
      , newseeds = []
      
    for(var key in ports) {
      if(!ports[key].station) continue
      var item = station_index_to_ports[ports[key].station]
      item.push ? item.push(port) : item = [port]
    }
    
    // OPT: this is, uh, horribly unperformant. please fix.
    while(seed.subspaces.length) {
      var max = Math.max.apply(seed.subspaces)
        , index = seed.subspaces.indexOf(max)
        , new_index = newseeds.length

      newseeds.push(max)

      station_index_to_ports[index].forEach(function(port) {
        port.station = new_index
      })
      
      seed.subspaces.splice(index, 1)
    }
  }
  
    
  seed.ports.sort()
  seed.routes.sort()
  
  seed.id = DAML.spaceseed_hash(seed)
  DAML.SPACESEEDS[seed.id] = seed // THINK: collision resolution? 
  
  return seed.id
}

DAML.spaceseed_hash = function(seed) {
  return murmurhash(JSON.stringify(seed))
}

DAML.sort_object_keys = function(obj, sorter) {
  if(typeof obj != 'object')
    return {}
    
  var newobj = {}
    , keys = Object.keys(obj).sort(sorter)
  
  for(var i=0, l=keys.length; i < l; i++)
    newobj[keys[i]] = obj[keys[i]]
  
  return newobj
}

DAML.recursive_sort_object_keys = function(obj, sorter) { // THINK: this allocates like a fiend
  if(typeof obj != 'object')
    return obj
  
  for(var key in obj)
    obj[key] = DAML.recursive_sort_object_keys(obj[key], sorter)
   
  return DAML.sort_object_keys(obj, sorter)
}

DAML.dialect_add = function(dialect) {
  dialect = JSON.parse(JSON.stringify(dialect)) // no refs, no muss
  dialect = DAML.recursive_sort_object_keys(dialect)
  
  dialect.id = DAML.spaceseed_hash(dialect)
  DAML.DIALECTS[dialect.id] = dialect

  return dialect.id
}


/*

  A Space is an execution context for Blocks.
  Each Space has a fixed Block that handles incoming messages by
  - dispatching based on message parameters
  - executing the message as code
  - feeding the message through the fixed Block as data
  Spaces may send messages to each other through channels via the space gateway.
  Each Space has a private variable context for mutable space variables.
  Each Space is responsible for its own Processes, but we're using a setTimeout to queue messages 
    (to avoid blowing the stack and to keep things ordered correctly)

  

  Frozen space data: 
    state: {}
    dialect: 
      commands: {}
      aliases: {}
    ports: 
      name:
      flavour: name [contains: dir, add, dock]
      settings: flavour data
      outs: [port_index]
      typehint: 
      space: id
      station: index?
    stations: 
      block: id
      name: ?
      
  Instances of ports have the flavour in prototype, and have more outs added by parent space. 
  
  DAML.SPACESEEDS is for abstract spaces, ie the spacial data that is imported/exported.
  DAML.OuterSpace refers to the outermost space [but we should make this an array to allow multiple independent "bubbles" to operate... maybe].
  An individual space is only referenced from its parent space... or maybe there's a weakmap cache somewhere or something.
  
  
*/

DAML.Port = function(space, flavour, settings, station, name, typehint) {
  var pflav = DAML.PORTFLAVOURS[flavour]
  
  if(!pflav)
    return DAML.setError('That flavour could not be found')
  
  if(DAML.PORTS[name])
    return DAML.setError('That port has already been added')
    
  if(!name)
    name = 'port-' + Math.random()
    
  if(!space)
    return DAML.setError('Every port must have a space')
  
  var port = Object.create(pflav)
  
  port.outs = []
  port.name = name
  port.space = space 
  port.flavour = flavour
  port.station = station || false
  port.typehint = typehint
  port.settings = DAML.isNice(settings) ? settings : {}
  
  port.add()
  
  return port
}


DAML.Port.prototype.add_out = function(port) {
  this.outs.push(port)
}

DAML.Port.prototype.remove_out = function(port) {
  this.outs.splice(this.outs.indexOf(port), 1)
}

DAML.Port.prototype.deliver = function(ship) {
  this.outs.forEach(function(port) {
    // if the port's space ... erm. 
    // the port lives in its "boundary" space, so only ports with no space|block are local to me. 
    // or block spaces also? like, the stations live in the space, and the station's ports live in the space too?
    // so if my 'outs' include ports from my port list that have a 'space', i need to send that message to that space
    // also, if i'm on the outgoing boundary of my space, how do i deliver messages? i need to send them to my parent space and have it delegate from there. OR, they'll touch the outside world if it's a flavoured port bounding outer space
    port.dock(ship) // TODO: yarg
  })
}


// something about using []s and {}s to map something... _and_ vs _or_? it was really clever, whatever it was.


DAML.Space = function(template, parent) {
  // the template a pointer to DAML.SPACESEEDS, which contains: id, dialect, state, ports, stations
  
  var self = this
  this.loading = true
  this.template = template // TODO: validate template
  
  this.id = template.id 
  this.dialect = template.dialect
  this.state = template.state || {}
  this.parent = parent || false // false is outer // TODO: validate parent

  this.stations = []
  ;(template.stations || []).forEach(this.add_station)
  // stations = stations.map(function(block_id) { return DAML.ABLOCKS[block_id] })

  this.ports = []
  ;(template.ports || []).filter(function(port) { return port.space == this.id })
                         .forEach(this.add_port) // add only my own ports
  
  
  // this.ports = ports
  // .map(function(port) {
  //   return port.space == id 
  //        ? new DAML.Port(self, port.flavour, port.settings, this.stations[port.station], port.name, port.typehint)
  //        : false
  // })
  
  // this.ports
  // .filter()
  // .forEach(function(port, i) { 
  //   ports[i].outs.forEach(function(index) { 
  //     port.add_out(self.ports[index]) 
  //   }) 
  // })
  
  
  
  // ask my parent to add its outs to my ports
  if(parent)
    parent.hi_im_here_fill_my_ports_please(this, this.ports) // this adds me to parent.children, replaces parent's fake ports with my actual ports, and adds parents routes to my ports
  else // i'm in outer space?
    this.foo = 123 
  
  // switch my ports outs to valid port links
  
  // except my child space's ports won't be valid yet...
  // oh, except i don't have to worry about those -- they don't need to be valid until my kids ask for port info, then we trade the port ref for the proper outs. okay, maybe that works? timing, though... timing. merglepuffs.
  
  // this.wiring = this.ports.map(function(port) {return port.outs})
                     // .filter(function(outs) {return outs.length}) // have to retain indices...
  
  
  this.children = []
  // yoiks
  this.only_one_process = true
  this.processes = []
  this.listeners = []
  this.queue = []
  // this.block = DAML.get_block(block)
  
  // THINK: validate id?
  
  delete this.loading
}

DAML.Space.prototype.hi_im_here_fill_my_ports_please = function(child) {
  // this adds me to parent.children, replaces parent's fake ports with my actual ports, and adds parents routes to my ports
  this.children.push(child)
  this.ports.filter(function(port) {return port.space == child})
            .forEach()
}

DAML.Space.prototype.switch_template = function(template) {
  // this gives me a new template, makes the needed changes, and tells my parent
  // get deltas of old template and new template
  // is this the right thing to do? this seems silly.
}

DAML.Space.prototype.hi_i_have_a_new_template_please_update_yourself = function(child, old_template) {
  // this tells the parent that i have a new template so it needs to update itself and its own template 
  
  // switch all my ports from old space id to new space id
  // make a new template based on the port mods
  // tell my parent
  if(!this.parent)
    return false
}

DAML.Space.prototype.add_port = function(port) {
  var port = new DAML.Port(this, port.flavour, port.settings, this.stations[port.station], port.name, port.typehint)
  this.ports.push(port)
  
  return this.export_and_update()
}

DAML.Space.prototype.remove_port = function(port) {
  
  // TODO: remove the port's routes
  return this.export_and_update()
}

DAML.Space.prototype.add_route = function(from_port, to_port) {
  // TODO: check ports
  from_port.outs.slice
  
  return this.export_and_update()
}

DAML.Space.prototype.remove_route = function(from_port, to_port) {

  return this.export_and_update()
}

DAML.Space.prototype.add_station = function(block) {
  // TODO: check block for blockiness or get from ABLOCKS
  // TODO: add standard station ports (in / out / error)
  
  this.stations.push(block)
  return this.export_and_update()
}

DAML.Space.prototype.remove_station = function(station) {
  var index = this.stations.indexOf(station)
  
  if(index == -1)
    return DAML.setError('No such station found')
  
  // TODO: remove the station's ports
  
  this.stations.splice(index, 1) // THINK: this won't work concurrently -- is that ok?
  return this.export_and_update()
}

DAML.Space.prototype.add_space = function(space) {
  
  return this.export_and_update()
}

DAML.Space.prototype.remove_space = function(index) {
  
  return this.export_and_update()
}

DAML.Space.prototype.export_and_update = function(index) {
  // yurm
  if(this.loading) 
    return false // we're loading, no need to change
  
  
}




DAML.Space.prototype.deliver = function(message, prior_starter) {
  // execute the block, with the message loaded in as __
  var scope = {"*in": message} // TODO: find something better...
  this.execute(this.block, scope, prior_starter)
}

// TODO: move this all into a Process, instead of doing it here.
// THINK: there's no protection in here again executing multiple processes concurrently in the same space -- which is bad. find a way to bake that in. [except for those cases of desired in-pipeline parallelism, of course]
DAML.Space.prototype.execute = function(ablock_or_segment, scope, prior_starter, listeners) {
  var self = this
    , block = DAML.get_block(ablock_or_segment)
  
  // if(!when_done) {
  //   when_done = function(result) {
  //     // THINK: what should we do here?
  //     DAML.setError("No when_done callback sent to space.execute for result: " + DAML.stringify(result))
  //   }
  // }
  
  if(this.processes.length && this.only_one_process) {
    // OPT: this is a stupid way to queue and costs ~4ms on most current engines
    // NOTE: we kind of need this -- it keeps all the process requests in order (using JS's event loop) and clears our closet of skeletal callstacks
    var thunk = function() {
      var result = self.REAL_execute(block, scope, prior_starter, listeners)
      if(result === result)
        prior_starter(result) // we're asynced, but the process didn't know it
    }
    setTimeout(thunk, 0)
    // this.queue.push(function() {
    //   self.REAL_execute(block, scope, prior_starter, when_done)
    // })
    return NaN
  }

  return self.REAL_execute(block, scope, prior_starter, listeners)
}

DAML.Space.prototype.REAL_execute = function(block, scope, prior_starter, listeners) {
  var self = this
    , process
    , result
  
  
  // var new_when_done = function(value) {
  //   self.cleanup(self.pid, self.last_value)
  //   if(when_done)
  //     when_done(value)
  // }
  
  if(!prior_starter) {
    prior_starter = function() {}
  }
  
  // override the prior_starter here -- THIS function is the prior starter now. (basically, remember to cleanup after and fire the listeners.)

  var my_starter = function(value) {
    self.cleanup(process, listeners)
    prior_starter(value)
  }
    
  process = new DAML.Process(this, block, scope, my_starter)
  this.processes.push(process)
  
  try {
    result = process.run()
    self.cleanup(process, listeners)
  } catch(e) {
    DAML.setError(e.message)
    self.cleanup(process, listeners)
  }
  
  return result
}

DAML.Space.prototype.cleanup = function(process, listeners) {
  if(!process.asynced) {
    this.scrub_process(process.pid)
    this.run_listeners(process.last_value, listeners) // THINK: is process.last_value right?
  }
    
  // this.run_queue()
}

DAML.Space.prototype.scrub_process = function(pid) {
  // OPT: store a ref or something make this faster
  for(var i=0, l=this.processes.length; i < l; i++) {
    if(this.processes[i].pid == pid) {
      var proc = this.processes[i]
      this.processes.splice(i, 1)
      break
    }
  }
}

DAML.Space.prototype.run_listeners = function(value, listeners) {
  listeners = listeners || this.listeners
  if(value !== undefined) {
    for(var i=0, l=listeners.length; i < l; i++) {
      // listeners[i](value) // call the registered listeners
      // THINK: do we really have to go async here? it's pretty costly. blech.
      ~ function() {var fun = listeners[i]; setTimeout(function() {fun(value)}, 0)} ()
    }
  }
}

DAML.Space.prototype.run_queue = function() {
  if(this.queue.length) {
    this.queue.pop()()
  }
}

DAML.OuterSpace = new DAML.Space(DAML.DIALECTS.top)




/*

  A Process executes a single Block from start to finish, executing each segment in turn and handling the wiring.
  Returns the last value from the Block's pipeline, or passes that value to prior_starter() and returns NaN if any segments go async.
  Each Process is used only once, for that one Block execution, and then goes away.
  A PRocess may launch sub-processes, depending on the segments in the Block.

*/


DAML.Process = function(space, block, scope, prior_starter) {
  this.pid = DAML.process_counter++
  this.starttime = Date.now()
  this.current = 0
  this.space = space
  this.block = block
  // this.when_done = when_done
  this.prior_starter = prior_starter
  this.asynced = false
  
  var self = this
  this.my_starter = function(value) {
    self.last_value = value
    self.state[self.current] = value // TODO: fix this it isn't general
    self.current++
    self.run()
  }
  
  // if(scope) {
  //   scope.forEach(function(item, key) {
  //     self.state[key] = item
  //   })
  // }
  
  // this.state = space.state // for overriding?
  this.state = scope || {} // process-level vars, like wiring, should be local to the process

  if(this.state['*in'] === undefined)
    this.state['*in'] = "" // ha ha jk oh wait we need this
}

DAML.Process.prototype.done = function() {
  // console.log(this)
  // console.trace()
  // console.log(this.block.segments)
  // console.log(this.block.wiring)
  
  // if(this.when_done)
  //   this.when_done(this.last_value)
  
  var output = this.last_value // default output
  
  if(this.block.wiring['*out']) {
    var outs = this.block.wiring['*out']
    if(outs.length == 1) {
      output = this.state[outs[0]]
    } 
    else {
      output = []
      for(var i=0, l=outs.length; i < l; i++) {
        output.push(this.state[outs[i]]) // THINK: sometimes array sometimes not is always weird
      }
    }
  } 
  
  output = DAML.isNice(output) ? output : "" // THINK: should probably do this for each possible output in the array form

  if(this.asynced) {
    this.asynced = false // ORLY??
    if(this.prior_starter)
      this.prior_starter(output)
    return undefined
  } 
  
  return output
}

DAML.Process.prototype.run = function() {
  var self = this
    , value = ""

  while(this.block.segments[this.current]) {
    value = this.next() // TODO: this is not a trampoline
    if(value !== value) {  
      this.asynced = true    
      return NaN // NaN is the "I took the callback route" signal...
    }
    self.last_value = value
    self.state[self.current] = value // TODO: fix this it isn't general
    self.current++
  }
  
  return this.done()
}

DAML.Process.prototype.next = function() {
  var self = this
    , segment = this.block.segments[this.current]
    , wiring = this.block.wiring
    , state = this.state

  if(!segment) {
    return "" // THINK: what?
    // return this.done()
  }
  
  var params = segment.paramlist || []
    , type = DAML.SegmentTypes[segment.type]
    , inputs = []
    , key = segment.key || this.current

  if(wiring[key]) {
    inputs = wiring[key].map(function(index) {return DAML.isNice(state[index]) ? state[index] : null}) // THINK: why null?
  }
  
  return type.execute(segment, inputs, this.space.dialect, this.my_starter, this)
}

// DAML.Process.prototype.bound_next = function() {
//   return this.next.bind(this)
// } 

// DAML.Process.prototype.reset = function() {
//   // THINK: this is probably a bad idea, but it makes debugging easier... can we reuse stacks?
//   this.last_value = null
//   this.pcounter = 0
// } 



//////// MORE HELPERS //////////

// DAML.trampoline = function(fun, then) {
//   var output = true
//   while (output) {output = fun()}
//   if(output === output) then()
// }

// might need a fun for sorting object properties...

/*
  This *either* returns a value or calls prior_starter and returns NaN.
  It *always* calls finalfun if it is provided.
  Used in small doses it makes your possibly-async command logic much simpler.
*/

DAML.dataTrampoline = function(data, processfun, joinerfun, prior_starter, finalfun) {
  var keys = Object.keys(data)
  , size = keys.length
  , index = -1
  , result = joinerfun()
  , asynced = false
  , value
  
  // if(typeof finalfun != 'function') {
  //   finalfun = function(x) {return x}
  // }
  
  finalfun = finalfun || function(x) {return x}
  
  var inner = function() {
    while(++index < size) {
      var key = keys[index]
      value = processfun(data[key], my_starter, key, result)
      if(value !== value) {
        asynced = true // we'll need to call prior_starter when we finish up
        return NaN // send stack killer up the chain 
        // [unleash the NaNobots|NaNites]
      }
      result = joinerfun(result, value)
    }
    
    if(asynced)
      return prior_starter(finalfun(result))

    return finalfun(result)
  }
  
  var my_starter = function(value) {
    result = joinerfun(result, value)
    inner()
  }
  
  return inner()
}

DAML.string_concat = function(total, value) {
  total = DAML.isNice(total) ? total : ''
  value = DAML.isNice(value) ? value : ''
  return DAML.stringify(total) + DAML.stringify(value)
}

DAML.list_push = function(total, value) {
  if(!Array.isArray(total)) return [] // THINK: is this always ok?
  value = DAML.isNice(value) ? value : ""
  total.push(value)
  return total
}


DAML.stringify = function(value) {
  return DAML.TYPES['string'](value)
}

DAML.execute_then_stringify = function(value, prior_starter) {
  if(DAML.isBlock(value)) {
    return DAML.TYPES['block'](value)(prior_starter)
  } else {
    return DAML.stringify(value)
  }
}

DAML.isBlock = function(value) {
  if(!value instanceof DAML.Segment)
    return false // THINK: this prevents block hijacking (by making an object in DAML shaped like a block), but requires us to e.g. convert all incoming JSONified block segments to real segments.
  
  return value && value.type == 'Block' && value.value && value.value.id
}

DAML.Parser.split_on = function(string, regex, label) {
  if(typeof string != 'string') 
    return string
  
  if(!(regex instanceof RegExp))
    regex = RegExp('[' + DAML.ETC.regex_escape(regex) + ']')
  
  var output = []
    , inside = []
    , special = /["{()}]/
    , match_break = 0
    , char_matches = false
    , we_are_matching = false
    
  for(var index=0, l=string.length; index < l; index++) {
    
    /*
      we need to not match when
      - inside quotes
      - unmatched parens
      - unmatched braces
    */
    
    var this_char = string[index]
      , am_inside = inside.length
    
    if(this_char == '"' && inside.length == 1 && inside[0] == '"')
      inside = []
    
    if(this_char == '"' && !am_inside)
      inside = ['"']
    
    if(this_char == '{') 
      inside.push('{')
    
    if(this_char == '(')
      inside.push('(')
    
    if(this_char == '}' || this_char == ')')
      inside.pop() // NOTE: this means unpaired braces or parens in quotes are explicitly not allowed... 
    
    char_matches = regex.test(this_char)
    
    // if(!!am_inside == !!inside.length) // not transitioning
    //   continue
    //   output.push(string.slice(match_break, index + 1))
    //   match_break = index + 1
    // }
    // 
    // if(!am_inside && inside.length) {
    //   output.push(string.slice(match_break, index))
    //   match_break = index
    // }
    // 
    // if(special.test(this_char))
    //   continue
    // 

    if(am_inside && inside.length)
      continue
    
    if(we_are_matching === char_matches) 
      continue

    if(we_are_matching) { // stop matching
      if(label)
        output.push(new DAML.Token(label, string.slice(match_break, index)))
      
      match_break = index
      we_are_matching = false
    }
    
    else { // start matching
      if(index)
        output.push(string.slice(match_break, index))

      match_break = index
      we_are_matching = true      
    }
  }
  
  // if(match_break < index) {
  //   var lastbit = string.slice(match_break, index)
  //   if(lastbit.length) {
  //     output.push(lastbit)      
  //   }
  // }
  
  if(match_break < index) {
    var lastbit = string.slice(match_break, index)
    if(regex.test(lastbit[0])) { // at this point lastbit is homogenous
      if(label)
        output.push(new DAML.Token(label, string.slice(match_break, index)))
    } else {
      output.push(lastbit)      
    }
  }
  return output
}

DAML.Parser.split_on_terminators = function(string) {
  // TODO: make Tglyphs work with multi-char Terminators
  return DAML.Parser.split_on(string, DAML.Tglyphs, 'Terminator')
}

DAML.Parser.split_on_space = function(string) {
  return DAML.Parser.split_on(string, /[\s\u00a0]/)
}

// give each item its time in the sun. also, allow other items to be added, removed, reordered or generally mangled
DAML.mungeLR = function(items, fun) {
  var L = []
    , R = items
    , item = {}
    , result = []
  
  if(!items.length) return items
  
  do {
    item = R.shift() // OPT: shift is slow
    result = fun(L, item, R)
    L = result[0]
    R = result[1]
  } while(R.length)
  
  return L
}


DAML.concat = function(a,b) {return a.concat(b)}

/////// SOME HELPER METHODS PUUKE ///////////

// TODO: clean up this error stuff... 

// THINK: maybe every station has a stderr outport, and you tap those ports to do anything with errors (instead of having them act as a global cross-cutting concern). you could run them to the console.log outport by default (or just in debug mode) and do something else in production like log in the db and send an email or something, based on error message / metadata. [oh... errors should probably have metadata]
// we can also put the error text/data in the command definition as an array, and then reference it from the error sender as an index (or object/key is probably better)
// that would simplify e.g. translation, and allows automated error stuff (eg show what errors a command can throw, practice throwing those to see what happens, pick out all potential errors of type foo from all stations (like, which stations are capable of producing *extreme* errors?))

// use this to set simple errors
DAML.setError = function(error) {
  return DAML.onerror('', error)
}

// use this to report errors in low-level daml processes
DAML.onerror = function(command, error) {
  console.log('error: ' + error, command)
  return ""
}


DAML.clone = function(value) {
  try {
    return JSON.parse(JSON.stringify(value)); 
  } catch (e) {
    return value;
  }
}

function murmurhash(key, seed) {
	var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i;

	remainder = key.length & 3; // key.length % 4
	bytes = key.length - remainder;
	h1 = seed;
	c1 = 0xcc9e2d51;
	c2 = 0x1b873593;
	i = 0;

	while (i < bytes) {
	  	k1 = 
	  	  ((key.charCodeAt(i) & 0xff)) |
	  	  ((key.charCodeAt(++i) & 0xff) << 8) |
	  	  ((key.charCodeAt(++i) & 0xff) << 16) |
	  	  ((key.charCodeAt(++i) & 0xff) << 24);
		++i;

		k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
		k1 = (k1 << 15) | (k1 >>> 17);
		k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

		h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
		h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
		h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
	}

	k1 = 0;

	switch (remainder) {
		case 3: k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
		case 2: k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
		case 1: k1 ^= (key.charCodeAt(i) & 0xff);

		k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
		k1 = (k1 << 15) | (k1 >>> 17);
		k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
		h1 ^= k1;
	}

	h1 ^= key.length;

	h1 ^= h1 >>> 16;
	h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
	h1 ^= h1 >>> 13;
	h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
	h1 ^= h1 >>> 16;

	return h1 >>> 0;
}

DAML.ETC.isNumeric = function(value) {
  return (typeof(value) === 'number' || typeof(value) === 'string') && value !== '' && !isNaN(value)
}

DAML.ETC.toNumeric = function(value) {
  if(value === '0') return 0
  if(typeof value == 'number') return value
  if(typeof value == 'string') return +value ? +value : 0
  return 0
}

DAML.ETC.regex_escape = function(str) {
  var specials = /[.*+?|()\[\]{}\\$^]/g // .*+?|()[]{}\$^
  return str.replace(specials, "\\$&")
}

DAML.ETC.flag_checker_regex = /\/(g|i|gi|m|gm|im|gim)?$/

DAML.ETC.string_to_regex = function(string, global) {
  if(string[0] !== '/' || !DAML.ETC.flag_checker_regex.test(string)) {
    return RegExp(DAML.ETC.regex_escape(string), (global ? 'g' : ''))
  }
  
  var flags = string.slice(string.lastIndexOf('/') + 1)
  string = string.slice(1, string.lastIndexOf('/'))
  
  return RegExp(string, flags)
}

DAML.ETC.isFalse = function(value) {
  if(!value) return true // '', 0, false, NaN, null, undefined
  if(typeof value == 'object' && _.isEmpty(value)) return true // empty lists too
}

// via https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== "function") {
      // closest thing possible to the ECMAScript 5 internal IsCallable function
      DAML.setError("What is trying to be bound is not callable, and that which seeks to be called is not bindable")
    }
 
    var aArgs = Array.prototype.slice.call(arguments, 1), 
        fToBind = this, 
        fNOP = function () {},
        fBound = function () {
          return fToBind.apply((this instanceof fNOP && oThis) ? this: oThis,
                               aArgs.concat(Array.prototype.slice.call(arguments)));
        };
 
    fNOP.prototype = this.prototype;
    fBound.prototype = new fNOP();
 
    return fBound;
  };
}

DAML.import_aliases({
  '>': 'variable set path',
  'grep': 'string grep on',
  'join': 'string join value',
  
  'run': 'daml run block',
  'quote': 'daml quote',
  'unquote': 'daml unquote',
  
  '*': 'list pair value',
  'merge': 'list merge',
  'each': 'list each',
  'map': 'list map',
  'reduce': 'list reduce',
  'fold': 'list reduce',
  'sort': 'list sort',
  // 'ZZZgroup': 'list group',
  // 'prune': 'list prune daml',
  'filter': 'list filter',
  'count': 'list count value',
  'union': 'list union value',
  'range': 'list range length',
  
  // '%': 'content get value',
  
  'eq': 'logic is like',
  'is': 'logic is', // for 'is in'
  'if': 'logic if value',
  'then': 'logic if value __ then',
  'else': 'logic if value __ then __ else',
  'and': 'logic and value',
  'or': 'logic or value',
  'not': 'logic not value',
  'cond': 'logic cond value',
  
  'add': 'math add value',
  'subtract': 'math subtract value', // 'minus' is sometimes better, but with constants we'll use 'add -N'
  'multiply': 'math multiply value',
  'times': 'math multiply value',
  'divide': 'math divide', // careful, this one is different
  'round': 'math round',
  'mod': 'math mod by',
  'less': 'math less',
  
  'log': 'process log value',
  'tap': 'process log passthru 1 value',
})