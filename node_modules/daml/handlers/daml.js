// commands for fiddling with daml directly

DAML.import_models({
  daml: {
    desc: 'Commands for DAML manipulation',
    methods: {
      
      import: {
        desc: 'Import a set of commands into the local DAML dialect',
        params: [
          {
            key: 'template', // THINK: this should be called 'daml'... /sigh
            desc: 'A DAML string',
            type: 'template',
            required: true,
          },
          {
            key: 'into',
            desc: 'A model to import into',
            type: 'string',
            required: true,
            falsy: false,
          },
          {
            key: 'as',
            desc: "The new method's name",
            type: 'string',
            required: true,
            falsy: false,
          },
          {
            key: 'params',
            desc: 'A list of parameters',
            type: 'list',
            fallback: []
          },
        ],
        fun: function(template, into, as, params) {
          var obj={}, pobj=[], fun
          
          // TODO: allow hashes as params 
          for(var i=0, l=params.length; i < l; i++) {
            pobj.push({key: params[i], desc: "A param"})
          }
          
          funthunker = function() {
            DAML.execute('variable', 'push_context', [])
            for(var i=0, l=params.length; i < l; i++) {
              DAML.execute('variable', 'set', [params[i], arguments[i]])
            }
            var output = template.toFun()
            DAML.execute('variable', 'push_context', [])
            return output
          }

          obj[into] = {methods: {}}
          obj[into]['methods'][as] = {"params": pobj, "fun": funthunker}
          
          DAML.import_models(obj)
        },
      },
      
      alias: {
        desc: "Create a new alias.",
        params: [
          {
            key: 'string',
            desc: "A string",
            type: "string",
            required: true,
            falsy: false,
          },
          {
            key: 'as',
            desc: "The newer, shorter string",
            type: "string",
            required: true,
          },
        ],
        fun: function(string, as) {
          var obj = {}
          obj[as] = string
          DAML.import_aliases(obj)
        },
      },
      
      quote: {
        desc: "Return a pure string, possibly containing DAML",
        params: [
          {
            key: 'value',
            desc: "A string",
            type: "string",
            required: true,
          },
        ],
        fun: function(value) {
          return value // type system handles the escaping
        },
      },
      
      unquote: {
        desc: "Convert a string into a fing. This will eventually execute (it's a bit like a delayed run), so use it carefully",
        params: [
          {
            key: 'value',
            desc: "A string",
            type: "string",
            required: true,
          },
        ],
        fun: function(value) {
          return DAML.compile(value)
        },
      },
      
      run: {
        desc: "Completely process some DAML",
        params: [
          {
            key: 'value',
            desc: "Some DAML",
            type: "string",
            required: true,
          },
        ],
        fun: function(value) {
          return DAML.run(value)
        },
      },
      
      parse: {
        desc: "Convert a DAML string's canonical ptree",
        params: [
          {
            key: 'string',
            desc: "The stage key",
            type: "string",
          },
        ],
        fun: function(string) {
          return DAML.parse(string)
        },
      },
      
    }
  }
})