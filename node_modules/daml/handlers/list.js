// A list in DAML is an ordered sequence of items that are optionally keyed.

DAML.import_models({
  list: {
    desc: 'Commands for list manipulation',
    help: 'A list in DAML is an ordered sequence of items that are optionally keyed. Anything you can do with a classic list or hash you can do with a DAML list. It is the fundamental data structure in DAML.',
    methods: {
      
      count: {
        desc: "Count the items in a list",
        params: [
          {
            key: 'value',
            desc: 'The list to count',
            type: 'list'
          }
        ],
        fun: function(value) {
          return value.length;
        },
      },
      
      pair: {
        desc: "Create a new list, using the first item as its first key, the second item as that value, and so on.",
        params: [
          {
            key: 'value',
            desc: 'The list to convert',
            type: 'list'
          }
        ],
        fun: function(value) {
          var k, v, hash = {};
          
          if(value.length < 2)
            return DAML.setError('The value parameter must contain at least two elements');

          while(value.length > 1) 
          {
            k = String(value.shift());
            v = value.shift();
            hash[k] = v;
          }

          return hash;
        },
      },
      
      union: {
        desc: "Union the lists in a list",
        params: [
          {
            key: 'values',
            desc: 'A list of lists to union',
            type: 'list' // TODO: LoL type
          },
        ],
        fun: function(value) {
          return _.union(value);
        },
      },
      
      rekey: {
        desc: 'Key the data by the path value',
        help: 'Note that like all list commands this returns the modified value, but does not change the input data. Without path it keys by consecutive integers. With stack it collects items into sublists.',
        params: [
          {
            key: 'value',
            desc: 'The data to rekey',
            type: 'hash', // TODO: hash or list... what do we call that? [Just a list, thank you.]
            required: true,
          },
          {
            key: 'path',
            desc: 'A data path, like _id or my.user.group. Leave out to convert to list.',
            type: 'string',
            fallback: false,
          },
          {
            key: 'stack',
            desc: 'Returns a hash of lists of data items by stacking like-keyed items',
            type: 'string',
            fallback: false,
          },
        ],
        fun: function(data, path, stack) {
          var new_index, new_data = {};
          
          if(!path) return _.toArray(data);
          
          for(var index in data) {
            new_index = DAML.resolve_path(path, data[index]);
            
            if(!stack) {
              new_data[new_index] = data[index];
            } 
            else {
              if(!new_data[new_index]) new_data[new_index] = [];
              new_data[new_index].push(data[index]);
            }
          }
          return new_data;
        },
      },
      
      
      push: {
        desc: "Add a value to the end of a list",
        params: [
          {
            key: 'path',
            desc: 'A variable path, like :foo or :@foo.{#1}.baz',
            type: 'string'
          },
          {
            key: 'value',
            desc: 'Push this onto the end of the list',
            type: 'string'
          },
        ],
        fun: function(path, value) {
          
          // TODO: make this not change in-place -- all commands should change a copy
          // TODO: use 'data' as the primary parameter for operational data
          /*
            THINK: come up with language that distinguishes between lists, hashes, and *either* --> in DAML, a list and a hash are the *same* data object, which is just a mutable hash keyed by strings or consecutive integers or non-consecutive integers: we don't really care.
            In JS, the two fundamental data structures (lists and hashes) are optimized differently under the hood. We want to take advantage of that within the DAML core and handlers, while still respecting the fact that they're the same data structure in DAML. So every operation that takes a listhash has to handle it as either a list or a hash, whichever it maps to in JS. 
            It's really just a matter of a slight type mismatch between JS and DAML -- we just need good language to disambiguate. 'list' is nice, because it isn't used in JS proper, but it *really* implies an array and not a hash. 'hash' has the opposite problem.
            The DAML data structure is also *always* ordered, independent of keys, which is another difference.
            We could call it an 'association list', but: no good abbr., it's a concrete data structure (which we wouldn't use), it's not concise.
            'data'? container. 'stash? (for list-hash). stash is nice. it's a portmanteau. it means 'place to stick things'. it slightly implies array-like behavior, but that's compensated for by also being short for mustache. 
            
            WE'RE GOING TO STICK WITH 'LIST'. An indexed or keyed list is very similar to this data structure. 
            
          */
          
          // THINK: remap shortcuts for server vs client, e.g. 'log' could mean different things different places. This way you can still directly invoke the underlying command if you want that behavior, or use the shortcut for maximum flexibility. 
          
        },
      },
      
    }
  }
});