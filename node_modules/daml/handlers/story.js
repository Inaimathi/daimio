// commands for stories

DAML.import_models({
  story: {
    desc: "Commands for storied story commands",
    methods: {
      
      find: {
        desc: 'Find stories',
        help: "",
        params: [],
        fun: function() {
          DAML.db.collection('stories', function(err, c) {
            c.find().toArray(function(err, items) {
              global.output.push(items) /// FIXME!!!!!
            })
          })
        },
      },
      
      add: {
        desc: 'Add a story',
        help: "",
        params: [],
        fun: function() {
          var story = {}
          DAML.db.collection('stories', function(err, c) {
            c.insert(story) // sync-style is ok here, because we're not waiting for confirmation
          })
        },
      },
      
      set_title: {
        desc: 'Set the title',
        help: "",
        params: [
          {
            key: 'id',
            desc: 'The story id',
            type: 'string',
            required: true,
          },
          {
            key: 'value',
            desc: 'The value of the new title',
            type: 'string',
            required: true,
          },
        ],
        fun: function(id, value) {
          DAML.db.collection('stories', function(err, c) {
            c.update({_id: new DAML.mongo.ObjectID(id)}, {$set: {title: value}}, {}, function(err, result) {})
          });
        },
      },
      
      add_page: {
        desc: 'Add a new page to a story',
        help: "",
        params: [
          {
            key: 'id',
            desc: 'The story id',
            type: 'string',
            required: true,
          },
          {
            key: 'name',
            desc: 'The page name',
            type: 'string',
            required: true,
          },
        ],
        fun: function(id, name) {
          var page = {name: name, verbs: "", words: ""};
          DAML.db.collection('stories', function(err, c) {
            c.update({_id: new DAML.mongo.ObjectID(id)}, {$addToSet: {pages: page}}, {}, function(err, result) {})
          });
        },
      },
      
      set_verbs: {
        desc: 'Set the verbs',
        help: "",
        params: [
          {
            key: 'id',
            desc: 'The story id',
            type: 'string',
            required: true,
          },
          {
            key: 'page',
            desc: 'The page index (1-indexed)',
            type: 'number',
            required: true,
          },
          {
            key: 'value',
            desc: 'A string for verbs',
            type: 'string',
            required: true,
          },
        ],
        fun: function(id, page, value) {
          DAML.db.collection('stories', function(err, c) {
            var update = {}
            update['pages.' + (page - 1) + '.verbs'] = value
            c.update({_id: new DAML.mongo.ObjectID(id)}, {$set: update}, {}, function(err, result) {})
          })
        },
      },
      
      set_words: {
        desc: 'Set the words',
        help: "",
        params: [
          {
            key: 'id',
            desc: 'The story id',
            type: 'string',
            required: true,
          },
          {
            key: 'page',
            desc: 'The page id (1-indexed)',
            type: 'number',
            required: true,
          },
          {
            key: 'value',
            desc: 'A string for words',
            type: 'string',
            required: true,
          },
        ],
        fun: function(id, page, value) {
          DAML.db.collection('stories', function(err, c) {
            var update = {}
            update['pages.' + (page - 1) + '.words'] = value
            c.update({_id: new DAML.mongo.ObjectID(id)}, {$set: update}, {}, function(err, result) {})
          })
        },
      },
      
    }
  }
})