// Commands for verbs
// (c) dann toliver 2012

DAML.import_models({
  verb: {
    desc: "Verbish stuff",
    help: "",
    vars: {},
    methods: {

      find: {
        desc: 'Find verbs',
        help: "",
        params: [],
        fun: function() {
          DAML.db.collection('verbs', function(err, c) {
            c.find().toArray(function(err, items) {
              global.output.push(items); /// FIXME!!!!!
            });
          });
        },
      },

      add: {
        desc: 'Add a verb',
        help: "",
        params: [
          {
            key: 'type',
            desc: 'Type of noun',
            type: 'string',
            required: true,
          },
          {
            key: 'from',
            desc: 'Who is this from?',
            type: 'string',
            required: true,
          },
          {
            key: 'to',
            desc: 'Who is this to?',
            type: 'string',
            required: true,
          },
          {
            key: 'value',
            desc: 'Who is this strength?',
            type: 'number',
            required: true,
          },
          {
            key: 'data',
            desc: 'Some extra data',
            type: 'hash',
          },
        ],
        fun: function(type, from, to, value, data) {
          var verb = {
            type: type,
            data: data,
            from: from,
            to: to,
            value: value,
          };
          DAML.db.collection('verbs', function(err, c) {
            c.insert(verb); // sync-style is ok here, because we're not waiting for confirmation
          });
        },
      },

      set_type: {
        desc: 'Set the type',
        help: "",
        params: [
          {
            key: 'id',
            desc: 'The verb id',
            type: 'string',
            required: true,
          },
          {
            key: 'value',
            desc: 'The value of the new type',
            type: 'string',
            required: true,
          },
        ],
        fun: function(id, value) {
          DAML.db.collection('verbs', function(err, c) {
            c.update({_id: new DAML.mongo.ObjectID(id)}, {$set: {type: value}}, {}, function(err, result) {});
          });
        },
      },
    
      set_value: {
        desc: 'Set the value of the edge -- essentially its strength',
        help: "",
        params: [
          {
            key: 'id',
            desc: 'The verb id',
            type: 'string',
            required: true,
          },
          {
            key: 'value',
            desc: 'The value of the new value',
            type: 'number',
            required: true,
          },
        ],
        fun: function(id, value) {
          DAML.db.collection('verbs', function(err, c) {
            c.update({_id: new DAML.mongo.ObjectID(id)}, {$set: {value: value}}, {}, function(err, result) {});
          });
        },
      },
    
      set_data: {
        desc: 'Set the data',
        help: "",
        params: [
          {
            key: 'id',
            desc: 'The verb id',
            type: 'string',
            required: true,
          },
          {
            key: 'value',
            desc: 'The value of the new data',
            type: 'hash',
            required: true,
          },
        ],
        fun: function(id, value) {
          DAML.db.collection('verbs', function(err, c) {
            c.update({_id: new DAML.mongo.ObjectID(id)}, {$set: {data: value}}, {}, function(err, result) {});
          });
        },
      },
    
      // TODO: remove ... we'll have to push something into the log to allow easy reversal. maybe an add+id+date of first needed change. with a noun we want to first remove every verb, but if any of them throws an error then we retract those removals. then we remove the noun.
    
    }
  }
});
