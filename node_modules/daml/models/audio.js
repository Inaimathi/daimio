// A wrapper for the Web Audio APIs

var tempcon, tempgain // FIXME: this is stupid

DAML.import_models({
  audio: {
    desc: "A wrapper for the Web Audio APIs",
    help: "",
    vars: {
      context: (tempcon = new webkitAudioContext),
      gain: (tempgain = tempcon.createGain()),
      playing: false,
      nodes: [tempgain]
    },
    methods: {

      'add-osc': {
        desc: "Create a new oscillator",
        params: [
          {
            key: 'input',
            desc: "A node id which will control the frequency",
            type: 'list',
          },
          {
            key: 'freq',
            desc: "The oscillator's initial frequency",
            type: 'number',
            fallback: '440',
          },
        ],
        fun: function(input, freq) {
          var context = this.vars.context
            , gain = this.vars.gain

          var osc = context.createOscillator()
          osc.frequency.value = (freq || 440)
          osc.noteOn(1)

          id = this.vars.nodes.push(osc) - 1

          if(input.length) {
            this.methods.connect.fun.call(this, input, id, 'frequency')
            // var input_node = this.vars.nodes[input]
            // if(!input_node) return DAML.onerror("I can't seem to find that node");
            // input_node.connect(osc.frequency)
          }
          
          return id
        },
      },

      'add-gain': {
        desc: "Create a new gain node",
        params: [
          {
            key: 'input',
            desc: "A node id which will be affected by the gain",
            type: 'list',
          },
          {
            key: 'value',
            desc: "The gain amount",
            type: 'number',
            fallback: '1',
          },
        ],
        fun: function(input, value) {
          var context = this.vars.context
            , gain = this.vars.gain

          var node = context.createGain()
          node.gain.value = (value || 1) 
          
          if(input) {
            var input_node = this.vars.nodes[input]
            if(!input_node) return DAML.onerror("I can't seem to find that node");
            input_node.connect(node)
          }
          
          return this.vars.nodes.push(node) - 1
        },
      },

      'set-freq': {
        desc: "Set a node's frequency",
        params: [
          {
            key: 'id',
            desc: "The audio node's id",
            type: 'number',
            required: true,
          },
          {
            key: 'value',
            desc: "The frequency, in Hertz Donut",
            type: 'number',
            required: true,
            fallback: '440',
          },
        ],
        fun: function(id, freq) {
          var context = this.vars.context
            , gain = this.vars.gain
            , node = this.vars.nodes[id]

          if(!node) return DAML.onerror("I can't seem to find that node");
          if(!node.frequency || node.frequency.value === undefined) return DAML.onerror("That node doesn't have a frequency");

          node.frequency.value = freq
          return id
        },
      },


      volume: {
        desc: "Train the main gain",
        params: [
          {
            key: 'value',
            desc: "A value between 0 and 1, inclusive",
            type: 'number',
            required: true,
            fallback: '1',
          },
        ],
        fun: function(value) {
          if(value < 0 || value > 1) return DAML.onerror('That is not a number between 0 and 1');
          this.vars.gain.gain.value = value
          return true
        },
      },
      

      connect: {
        desc: "Connect some nodes' out to another node's in",
        params: [
          {
            key: 'input',
            desc: "Transmitting nodes' ids",
            type: 'list',
            required: true,
          },
          {
            key: 'to',
            desc: "Receiving node's id",
            type: 'number',
            required: true,
          },
          {
            key: 'as',
            desc: "A specific parameter, like 'frequency' or 'gain'",
            type: 'string',
          },
        ],
        fun: function(input, to, as) {
          var context = this.vars.context
            , gain = this.vars.gain
          
          var receiver = this.vars.nodes[to]
          if(!receiver) return DAML.onerror("The receiver is missing");
          
          if(as) {
            if(receiver[as] === undefined) return DAML.onerror("The receiver does not have that parameter");
            receiver = receiver[as]
          }

          var nodes = this.vars.nodes
          input.forEach(function(input_id) {
            var input_node = nodes[input_id]
            if(!input_node) return DAML.onerror("The receiver is missing");
            input_node.connect(receiver)
          })
          
          return input
        },
      },

      play: {
        desc: "Play the network",
        params: [],
        fun: function() {
          var context = this.vars.context
            , gain = this.vars.gain

          if(this.vars.playing) return DAML.onerror('Already playing!');
          gain.connect(context.destination)
          this.vars.playing = true
          return true
        },
      },

      pause: {
        desc: "Pause the network",
        params: [],
        fun: function() {
          var context = this.vars.context
            , gain = this.vars.gain

          if(!this.vars.playing) return DAML.onerror('Not currently playing');
          gain.disconnect(context.destination)
          this.vars.playing = false
          return false
        },
      },

    }
  }
});
