// general commands for general things

DAML.import_models({
  katsu: {
    desc: "Basic Katsu commands",
    methods: {
      set_stage: {
        desc: "Switch to a new stage",
        params: [
          {
            key: 'to',
            desc: "The stage key",
            fallback: "home",
            type: 'string',
            required: true,
          },
        ],
        fun: function(to) {
          Katsu.set_stage(to);
        },
      },
      
      munge: {
        desc: "Spawn things from a string",
        params: [
          {
            key: 'value',
            desc: "A string for spawning",
            type: 'string',
            required: true,
          },
        ],
        fun: function(value) {
          Katsu.munge(value);
        },
      },
      
      find_open_coords: {
        desc: "Get coords for an open square, if one exists",
        fun: function() {
          return Katsu.find_open_coords();
        },
      },
      
      play: {
        desc: "Get things going",
        fun: function() {
          clearInterval(Katsu.ETC.pauseint);
          Katsu.start();
        },
      },
      
      pause: {
        desc: "Slow things down",
        fun: function() {
          Katsu.swears.pause();
          Katsu.ETC.pauseint = setInterval(KM.go, 100); // still need to check the keyboard inputs
        },
      },
      
      reset: {
        desc: "Remove everything and start from the beginning",
        fun: function() {
          var things = Katsu.things;
          for(var key in things) {
            if(things[key].is.indexOf('player') != -1) continue;
            things[key].destroy();
          }
        },
      },
      
    }
  }
});








/*


========== THIS BELONGS TO MIASMA.JSON ===================

    {
      "trait" : "fancy_automata",
      "settings" : {
        "rules": "2,3|2,3,4,5,6,7,8",
        "character": "+",
        "template": "antispore"
      }
    }

// TODO: add a prelude daml chunk to the game, that does some upfront work

// TODO: this is the on.tick check for stage one and intro for stage two

var coords;

if(this.cooldown > Katsu.swears.tickcount) {return true;}

if(!_.find(Katsu.things, function(thing) {return thing.has_tag('spore')})) {
  if(!Katsu.attrs.level) {
    Katsu.attrs.level          = 2;
    $('#youwin').html('<h2>Congratulations, you survived. You are now on Level 2.</h2>').show();
    for(var i                  = 0; i < 10; i++) {
      coords                   = Katsu.find_open_coords();
      Katsu.Thing.spawn('spore1generator', coords[0], coords[1]);
    }
    for(var i                  = 0; i < 5; i++) {
      coords                   = Katsu.find_open_coords();
      Katsu.Thing.spawn('spore2generator', coords[0], coords[1]);
    }
    this.cooldown              = Katsu.swears.tickcount + 15;
  } else {
    Katsu.won                  = 'you win!!';
  }
}


// TODO: make these stages, and put the conditions in the main game loop 

// winning
Katsu.endings                  = [];
Katsu.endings.push(function() {
  // var won                   = false, layer = Katsu.players[now.name].layer;
  // 
  // _.each(Katsu.exits, function(exit) {
  //   if(layer.x == exit.x && layer.y == exit.y) {
  //     won                   = true;
  //   }
  // });
  
  if(!Katsu.won) {return false;}
  
  $('#youwin').html('<h2 class = "error">' + Katsu.won + '</h2>').show();
  // $('#startup').show();
  return true;
});

// losing
Katsu.endings.push(function() {
  if(!Katsu.killed) {return false;}
  
  DAML.execute('gametext', 'add', [Katsu.killed]);
  // DAML.models.gametext.methods.add(Katsu.killed);
  $('#youwin').html('<h2 class = "error">' + Katsu.killed + '</h2>').show();
  return true;
});


*/
